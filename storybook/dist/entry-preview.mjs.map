{"version":3,"sources":["../node_modules/ts-dedent/src/index.ts","../src/client/addons/actions/decorator.ts","../src/client/addons/actions/loader.ts","../src/client/render.ts","../src/lib/twig.ts","../src/entry-preview.ts"],"names":["dedent","templ","values","_i","strings","indentLengths","arr","str","matches","match","_a","_b","pattern_1","string","value","i","endentations","endentation","indentedValue","esm_default","ACTION_ATTRIBUTE","proxifyEvent","elementProxy","target","key","obj","setupActionListeners","StoryFn","context","args","root","arg","name","el","eventArgs","isAction","actionLoader","global","simulatePageLoad","simulateDOMContentLoaded","TwigTemplate","source","twig","rawSource","fetch","Node","fetchStoryHtml","url","path","params","storyContext","template","fetchUrl","body","buildStoryArgs","argTypes","storyArgs","argType","control","controlType","argValue","createComponent","argsString","render","id","component","renderToCanvas","title","showMain","showError","forceRemount","storyFn","parameters","canvasElement","storyId","fetchId","storyParams","element","decorators","loaders"],"mappings":"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","sourcesContent":["export function dedent(\n  templ: TemplateStringsArray | string,\n  ...values: unknown[]\n): string {\n  let strings = Array.from(typeof templ === 'string' ? [templ] : templ);\n\n  // 1. Remove trailing whitespace.\n  strings[strings.length - 1] = strings[strings.length - 1].replace(\n    /\\r?\\n([\\t ]*)$/,\n    '',\n  );\n\n  // 2. Find all line breaks to determine the highest common indentation level.\n  const indentLengths = strings.reduce((arr, str) => {\n    const matches = str.match(/\\n([\\t ]+|(?!\\s).)/g);\n    if (matches) {\n      return arr.concat(\n        matches.map((match) => match.match(/[\\t ]/g)?.length ?? 0),\n      );\n    }\n    return arr;\n  }, <number[]>[]);\n\n  // 3. Remove the common indentation from all strings.\n  if (indentLengths.length) {\n    const pattern = new RegExp(`\\n[\\t ]{${Math.min(...indentLengths)}}`, 'g');\n\n    strings = strings.map((str) => str.replace(pattern, '\\n'));\n  }\n\n  // 4. Remove leading whitespace.\n  strings[0] = strings[0].replace(/^\\r?\\n/, '');\n\n  // 5. Perform interpolation.\n  let string = strings[0];\n\n  values.forEach((value, i) => {\n    // 5.1 Read current indentation level\n    const endentations = string.match(/(?:^|\\n)( *)$/)\n    const endentation = endentations ? endentations[1] : ''\n    let indentedValue = value\n    // 5.2 Add indentation to values with multiline strings\n    if (typeof value === 'string' && value.includes('\\n')) {\n      indentedValue = String(value)\n        .split('\\n')\n        .map((str, i) => {\n          return i === 0 ? str : `${endentation}${str}`\n        })\n        .join('\\n');\n    }\n\n    string += indentedValue + strings[i + 1];\n  });\n\n  return string;\n}\n\nexport default dedent;\n","import { DecoratorFunction } from '@storybook/types';\nimport dedent from 'ts-dedent';\nimport { SymfonyRenderer } from '../../types';\n\nconst ACTION_ATTRIBUTE = 'data-storybook-action';\nconst proxifyEvent = <T extends Event>(e: T) => {\n    if (e.currentTarget !== null && Object.hasOwn(e.currentTarget, '__component')) {\n        // Special handling for Live Components:\n        // creates a proxy wrapper to omit the __component property that could\n        // make actions calls when its properties are listed\n        const elementProxy = new Proxy(e.currentTarget, {\n            ownKeys(target: Element): ArrayLike<string | symbol> {\n                return Object.keys(target).filter((key) => key !== '__component');\n            },\n        });\n        return new Proxy(e, {\n            get(obj, key) {\n                if (key === 'currentTarget') {\n                    return elementProxy;\n                }\n                return Reflect.get(obj, key);\n            },\n        });\n    }\n\n    return e;\n};\n\nexport const setupActionListeners: DecoratorFunction<SymfonyRenderer> = (StoryFn, context) => {\n    const { args } = context;\n    const root = document.getElementById('storybook-root');\n\n    // Configure action listeners once story has been rendered\n    document.addEventListener(\n        'DOMContentLoaded',\n        () => {\n            if (null === root) {\n                return;\n            }\n            Object.entries(args)\n                .filter(([, arg]) => typeof arg === 'function' && arg._sfActionId !== undefined)\n                .forEach(([name, arg]) => {\n                    const el = root.querySelector(`[${ACTION_ATTRIBUTE}='${arg._sfActionId}']`);\n                    if (null !== el) {\n                        el.addEventListener(name, (...eventArgs) => {\n                            arg(...eventArgs.map(proxifyEvent));\n                        });\n                    } else {\n                        console.warn(dedent`\n                        Action arg \"${name} is not bound to any DOM element.\"\n                    `);\n                    }\n                });\n        },\n        { once: true }\n    );\n\n    return StoryFn(context);\n};\n","import { LoaderFunction } from '@storybook/types';\n\nconst isAction = (arg: any): boolean => {\n    return (\n        typeof arg === 'function' &&\n        (('_isMockFunction' in arg && arg._isMockFunction) || ('isAction' in arg && arg.isAction))\n    );\n};\nexport const actionLoader: LoaderFunction = (context) => {\n    const { args } = context;\n\n    Object.entries(args)\n        .filter(([, value]) => isAction(value))\n        .forEach(([name, value]) => {\n            value._sfActionId = name;\n            if (value._isMockFunction) {\n                value.mockReset();\n            }\n        });\n};\n","import { global } from '@storybook/global';\n\nimport { dedent } from 'ts-dedent';\nimport type { ArgsStoryFn, RenderContext } from '@storybook/types';\nimport { simulatePageLoad, simulateDOMContentLoaded } from '@storybook/preview-api';\nimport type { Args, ArgTypes } from './public-types';\nimport type { FetchStoryHtmlType, SymfonyRenderer } from './types';\nimport { twig } from '../lib/twig';\n\nconst { fetch, Node } = global;\n\nconst fetchStoryHtml: FetchStoryHtmlType = async (url, path, params, storyContext, template) => {\n    const fetchUrl = new URL(`${url}/${path}`);\n\n    // Modify action args to pass action id instead of the handler\n    for (const name in params) {\n        if (params[name]._sfActionId !== undefined) {\n            params[name] = params[name]._sfActionId;\n        }\n    }\n\n    const body = {\n        args: { ...storyContext.globals, ...params },\n        template: template.getSource(),\n    };\n\n    const response = await fetch(fetchUrl, {\n        method: 'POST',\n        headers: {\n            'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(body),\n    });\n\n    return response.text();\n};\n\nconst buildStoryArgs = (args: Args, argTypes: ArgTypes) => {\n    const storyArgs = { ...args };\n\n    Object.keys(argTypes).forEach((key: string) => {\n        const argType = argTypes[key];\n        const { control } = argType;\n        const controlType = control && control.type.toLowerCase();\n        const argValue = storyArgs[key];\n        switch (controlType) {\n            case 'date':\n                // For cross framework & language support we pick a consistent representation of Dates as strings\n                storyArgs[key] = new Date(argValue).toISOString();\n                break;\n            default:\n        }\n    });\n\n    return storyArgs;\n};\n\nconst createComponent = (name: string, args: Args) => {\n    const argsString = Object.entries(args)\n        .map(([name, value]) => {\n            if (value._sfActionId !== undefined) {\n                return `:data-storybook-action=\"args['${name}']\"`;\n            }\n            return `:${name}=\"args['${name}']\"`;\n        })\n        .join(' ');\n\n    return twig`\n        <twig:${name} ${argsString} />\n    `;\n};\n\nexport const render: ArgsStoryFn<SymfonyRenderer> = (args, context) => {\n    const { id, component } = context;\n\n    if (typeof component === 'string') {\n        return {\n            template: twig(component),\n        };\n    }\n\n    if (typeof component === 'object') {\n        if ('getSource' in component && typeof component.getSource === 'function') {\n            return {\n                template: component,\n            };\n        } else if ('name' in component) {\n            return {\n                template: createComponent(component.name, args),\n                components: [component],\n            };\n        }\n    }\n\n    if (typeof component === 'function') {\n        return component(args, context);\n    }\n\n    console.log(component);\n    console.warn(dedent`\n    Symfony renderer only supports rendering Twig templates. Either:\n    - Create a \"render\" function in your story export\n    - Set the \"component\" story's property to a string or a template created with the \"twig\" helper\n\n    Received: ${component}\n    `);\n\n    throw new Error(`Unable to render story ${id}`);\n};\n\nexport async function renderToCanvas(\n    {\n        id,\n        title,\n        name,\n        showMain,\n        showError,\n        forceRemount,\n        storyFn,\n        storyContext,\n        storyContext: { parameters, args, argTypes },\n    }: RenderContext<SymfonyRenderer>,\n    canvasElement: SymfonyRenderer['canvasElement']\n) {\n    const { template } = storyFn();\n\n    const storyArgs = buildStoryArgs(args, argTypes);\n\n    const {\n        symfony: { id: storyId, params },\n    } = parameters;\n\n    const url = `${window.location.origin}/_storybook/render`;\n    const fetchId = storyId || id;\n    const storyParams = { ...params, ...storyArgs };\n    const element = await fetchStoryHtml(url, fetchId, storyParams, storyContext, template);\n\n    showMain();\n    if (typeof element === 'string') {\n        canvasElement.innerHTML = element;\n        simulatePageLoad(canvasElement);\n    } else if (element instanceof Node) {\n        // Don't re-mount the element if it didn't change and neither did the story\n        if (canvasElement.firstChild === element && !forceRemount) {\n            return;\n        }\n\n        canvasElement.innerHTML = '';\n        canvasElement.appendChild(element);\n        simulateDOMContentLoaded();\n    } else {\n        showError({\n            title: `Expecting an HTML snippet or DOM node from the story: \"${name}\" of \"${title}\".`,\n            description: dedent`\n        Did you forget to return the HTML snippet from the story?\n        Use \"() => <your snippet or node>\" or when defining the story.\n      `,\n        });\n    }\n}\n","import dedent from 'ts-dedent';\n\nexport class TwigTemplate {\n    constructor(private readonly source: string) {\n        this.source = source;\n    }\n\n    getSource() {\n        return this.source;\n    }\n\n    toString(): string {\n        return this.source;\n    }\n}\n\nexport function twig(source: TemplateStringsArray | string, ...values: any[]): TwigTemplate {\n    const strings = typeof source === 'string' ? [source] : source;\n    const rawSource = String.raw({ raw: strings }, ...values);\n    return new TwigTemplate(dedent(rawSource));\n}\n","import { setupActionListeners } from './client/addons/actions/decorator';\nimport { actionLoader } from './client/addons/actions/loader';\nimport { Decorator } from './client';\nexport { render, renderToCanvas } from './client/render';\n\nexport const decorators: Decorator[] = [setupActionListeners];\n\nexport const loaders = [actionLoader];\n\nexport const parameters = {\n    renderer: 'symfony' as const,\n    symfony: {},\n};\n"]}