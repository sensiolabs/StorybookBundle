{"version":3,"sources":["../node_modules/fast-xml-parser/src/util.js","../node_modules/fast-xml-parser/src/validator.js","../node_modules/fast-xml-parser/src/xmlparser/OptionsBuilder.js","../node_modules/fast-xml-parser/src/xmlparser/xmlNode.js","../node_modules/fast-xml-parser/src/xmlparser/DocTypeReader.js","../node_modules/strnum/strnum.js","../node_modules/fast-xml-parser/src/xmlparser/OrderedObjParser.js","../node_modules/fast-xml-parser/src/xmlparser/node2json.js","../node_modules/fast-xml-parser/src/xmlparser/XMLParser.js","../node_modules/fast-xml-parser/src/xmlbuilder/orderedJs2Xml.js","../node_modules/fast-xml-parser/src/xmlbuilder/json2xml.js","../node_modules/fast-xml-parser/src/fxp.js","../src/entry-preview-docs.ts","../src/client/addons/docs/sourceDecorator.ts","../src/client/addons/docs/buildVariableDeclarations.ts","../src/client/addons/docs/sourceSanitizer.ts","../src/client/lib/eventCallbacks.ts"],"names":["require_util","__commonJSMin","exports","nameStartChar","nameChar","nameRegexp","regexName","getAllMatches","string","regex","matches","match","allmatches","len","index","isName","v","obj","target","a","arrayMode","keys","require_validator","util","defaultOptions","xmlData","options","tags","tagFound","reachedRoot","readPI","tagStartPos","readCommentAndCDATA","closingTag","tagName","validateTagName","msg","getErrorObject","getLineNumberForPosition","result","readAttributeStr","attrStr","attrStrStart","isValid","validateAttributeString","otg","openPos","afterAmp","validateAmpersand","isWhiteSpace","t","char","i","start","tagname","angleBracketsCount","doubleQuote","singleQuote","startChar","tagClosed","validAttrStrRegxp","attrNames","getPositionFromMatch","attrName","validateAttrName","validateNumberAmpersand","re","count","code","message","lineNumber","lines","require_OptionsBuilder","val","jPath","attrs","buildOptions","require_xmlNode","module","XmlNode","key","node","require_DocTypeReader","readDocType","entities","hasBody","comment","exp","isEntity","readEntityExp","validateEntityName","isElement","isAttlist","isNotation","isComment","entityName","name","require_strnum","hexRegex","numRegex","consider","toNumber","str","trimmedStr","sign","leadingZeros","numTrimmedByZeros","trimZeros","eNotation","num","numStr","require_OrderedObjParser","xmlNode","OrderedObjParser","_","addExternalEntities","parseXml","parseTextData","resolveNameSpace","buildAttributesMap","isItStopNode","replaceEntitiesValue","readStopNodeData","saveTextToParentTag","addChild","externalEntities","entKeys","ent","dontTrim","hasAttributes","isLeafNode","escapeEntities","newval","parseValue","prefix","attrsRegx","oldVal","aName","newVal","attrCollection","xmlObj","currentNode","textData","closeIndex","findClosingIndex","colonIndex","lastTagName","propIndex","tagData","readTagExp","childNode","endIndex","tagExp","rawTagName","attrExpPresent","lastTag","tagContent","entity","stopNodes","currentTagName","allNodesExp","stopNodePath","stopNodeExp","tagExpWithClosingIndex","closingChar","attrBoundary","ch","errMsg","closingIndex","removeNSPrefix","separatorIndex","startIndex","openTagCount","shouldParse","require_node2json","prettify","compress","arr","text","compressedObj","tagObj","property","propName","newJpath","isLeaf","isLeafTag","assignAttributes","attrMap","jpath","atrrName","textNodeName","propCount","require_XMLParser","validator","XMLParser","validationOption","orderedObjParser","orderedResult","value","require_orderedJs2Xml","EOL","toXml","jArray","indentation","arrToStr","xmlStr","isPreviousElementTag","newJPath","tagText","isStopNode","attStr","attr_to_str","tempInd","piTextNodeName","newIdentation","tagStart","tagValue","attr","attrVal","textValue","require_json2xml","buildFromOrderedJs","Builder","isAttribute","processTextOrObjNode","indentate","jObj","level","arrLen","listTagVal","j","item","Ks","L","object","tagEndExp","piClosingChar","closeTag","require_fxp","XMLBuilder","SourceType","enhanceArgTypes","SNIPPET_RENDERED","addons","useEffect","validArg","isObject","indent","formatValue","objectDefinition","arrayDefinition","buildVariableDeclarations","args","import_fast_xml_parser","logger","CALLBACK_ATTRIBUTE","ACTION_ATTRIBUTE","STRIPPED_ATTRIBUTES","isAttributeName","isLitAttributeName","isExprAttributeName","isTextName","isNodeName","getAttributeName","traverseNode","child","sanitize","source","xml","skipSourceRender","context","sourceParams","isArgsStory","sourceDecorator","storyFn","story","setup","id","unmappedArgs","decorators","parameters","argTypesEnhancers"],"mappings":"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","sourcesContent":["'use strict';\n\nconst nameStartChar = ':A-Za-z_\\\\u00C0-\\\\u00D6\\\\u00D8-\\\\u00F6\\\\u00F8-\\\\u02FF\\\\u0370-\\\\u037D\\\\u037F-\\\\u1FFF\\\\u200C-\\\\u200D\\\\u2070-\\\\u218F\\\\u2C00-\\\\u2FEF\\\\u3001-\\\\uD7FF\\\\uF900-\\\\uFDCF\\\\uFDF0-\\\\uFFFD';\nconst nameChar = nameStartChar + '\\\\-.\\\\d\\\\u00B7\\\\u0300-\\\\u036F\\\\u203F-\\\\u2040';\nconst nameRegexp = '[' + nameStartChar + '][' + nameChar + ']*'\nconst regexName = new RegExp('^' + nameRegexp + '$');\n\nconst getAllMatches = function(string, regex) {\n  const matches = [];\n  let match = regex.exec(string);\n  while (match) {\n    const allmatches = [];\n    allmatches.startIndex = regex.lastIndex - match[0].length;\n    const len = match.length;\n    for (let index = 0; index < len; index++) {\n      allmatches.push(match[index]);\n    }\n    matches.push(allmatches);\n    match = regex.exec(string);\n  }\n  return matches;\n};\n\nconst isName = function(string) {\n  const match = regexName.exec(string);\n  return !(match === null || typeof match === 'undefined');\n};\n\nexports.isExist = function(v) {\n  return typeof v !== 'undefined';\n};\n\nexports.isEmptyObject = function(obj) {\n  return Object.keys(obj).length === 0;\n};\n\n/**\n * Copy all the properties of a into b.\n * @param {*} target\n * @param {*} a\n */\nexports.merge = function(target, a, arrayMode) {\n  if (a) {\n    const keys = Object.keys(a); // will return an array of own properties\n    const len = keys.length; //don't make it inline\n    for (let i = 0; i < len; i++) {\n      if (arrayMode === 'strict') {\n        target[keys[i]] = [ a[keys[i]] ];\n      } else {\n        target[keys[i]] = a[keys[i]];\n      }\n    }\n  }\n};\n/* exports.merge =function (b,a){\n  return Object.assign(b,a);\n} */\n\nexports.getValue = function(v) {\n  if (exports.isExist(v)) {\n    return v;\n  } else {\n    return '';\n  }\n};\n\n// const fakeCall = function(a) {return a;};\n// const fakeCallNoReturn = function() {};\n\nexports.isName = isName;\nexports.getAllMatches = getAllMatches;\nexports.nameRegexp = nameRegexp;\n","'use strict';\n\nconst util = require('./util');\n\nconst defaultOptions = {\n  allowBooleanAttributes: false, //A tag can have attributes without any value\n  unpairedTags: []\n};\n\n//const tagsPattern = new RegExp(\"<\\\\/?([\\\\w:\\\\-_\\.]+)\\\\s*\\/?>\",\"g\");\nexports.validate = function (xmlData, options) {\n  options = Object.assign({}, defaultOptions, options);\n\n  //xmlData = xmlData.replace(/(\\r\\n|\\n|\\r)/gm,\"\");//make it single line\n  //xmlData = xmlData.replace(/(^\\s*<\\?xml.*?\\?>)/g,\"\");//Remove XML starting tag\n  //xmlData = xmlData.replace(/(<!DOCTYPE[\\s\\w\\\"\\.\\/\\-\\:]+(\\[.*\\])*\\s*>)/g,\"\");//Remove DOCTYPE\n  const tags = [];\n  let tagFound = false;\n\n  //indicates that the root tag has been closed (aka. depth 0 has been reached)\n  let reachedRoot = false;\n\n  if (xmlData[0] === '\\ufeff') {\n    // check for byte order mark (BOM)\n    xmlData = xmlData.substr(1);\n  }\n  \n  for (let i = 0; i < xmlData.length; i++) {\n\n    if (xmlData[i] === '<' && xmlData[i+1] === '?') {\n      i+=2;\n      i = readPI(xmlData,i);\n      if (i.err) return i;\n    }else if (xmlData[i] === '<') {\n      //starting of tag\n      //read until you reach to '>' avoiding any '>' in attribute value\n      let tagStartPos = i;\n      i++;\n      \n      if (xmlData[i] === '!') {\n        i = readCommentAndCDATA(xmlData, i);\n        continue;\n      } else {\n        let closingTag = false;\n        if (xmlData[i] === '/') {\n          //closing tag\n          closingTag = true;\n          i++;\n        }\n        //read tagname\n        let tagName = '';\n        for (; i < xmlData.length &&\n          xmlData[i] !== '>' &&\n          xmlData[i] !== ' ' &&\n          xmlData[i] !== '\\t' &&\n          xmlData[i] !== '\\n' &&\n          xmlData[i] !== '\\r'; i++\n        ) {\n          tagName += xmlData[i];\n        }\n        tagName = tagName.trim();\n        //console.log(tagName);\n\n        if (tagName[tagName.length - 1] === '/') {\n          //self closing tag without attributes\n          tagName = tagName.substring(0, tagName.length - 1);\n          //continue;\n          i--;\n        }\n        if (!validateTagName(tagName)) {\n          let msg;\n          if (tagName.trim().length === 0) {\n            msg = \"Invalid space after '<'.\";\n          } else {\n            msg = \"Tag '\"+tagName+\"' is an invalid name.\";\n          }\n          return getErrorObject('InvalidTag', msg, getLineNumberForPosition(xmlData, i));\n        }\n\n        const result = readAttributeStr(xmlData, i);\n        if (result === false) {\n          return getErrorObject('InvalidAttr', \"Attributes for '\"+tagName+\"' have open quote.\", getLineNumberForPosition(xmlData, i));\n        }\n        let attrStr = result.value;\n        i = result.index;\n\n        if (attrStr[attrStr.length - 1] === '/') {\n          //self closing tag\n          const attrStrStart = i - attrStr.length;\n          attrStr = attrStr.substring(0, attrStr.length - 1);\n          const isValid = validateAttributeString(attrStr, options);\n          if (isValid === true) {\n            tagFound = true;\n            //continue; //text may presents after self closing tag\n          } else {\n            //the result from the nested function returns the position of the error within the attribute\n            //in order to get the 'true' error line, we need to calculate the position where the attribute begins (i - attrStr.length) and then add the position within the attribute\n            //this gives us the absolute index in the entire xml, which we can use to find the line at last\n            return getErrorObject(isValid.err.code, isValid.err.msg, getLineNumberForPosition(xmlData, attrStrStart + isValid.err.line));\n          }\n        } else if (closingTag) {\n          if (!result.tagClosed) {\n            return getErrorObject('InvalidTag', \"Closing tag '\"+tagName+\"' doesn't have proper closing.\", getLineNumberForPosition(xmlData, i));\n          } else if (attrStr.trim().length > 0) {\n            return getErrorObject('InvalidTag', \"Closing tag '\"+tagName+\"' can't have attributes or invalid starting.\", getLineNumberForPosition(xmlData, tagStartPos));\n          } else {\n            const otg = tags.pop();\n            if (tagName !== otg.tagName) {\n              let openPos = getLineNumberForPosition(xmlData, otg.tagStartPos);\n              return getErrorObject('InvalidTag',\n                \"Expected closing tag '\"+otg.tagName+\"' (opened in line \"+openPos.line+\", col \"+openPos.col+\") instead of closing tag '\"+tagName+\"'.\",\n                getLineNumberForPosition(xmlData, tagStartPos));\n            }\n\n            //when there are no more tags, we reached the root level.\n            if (tags.length == 0) {\n              reachedRoot = true;\n            }\n          }\n        } else {\n          const isValid = validateAttributeString(attrStr, options);\n          if (isValid !== true) {\n            //the result from the nested function returns the position of the error within the attribute\n            //in order to get the 'true' error line, we need to calculate the position where the attribute begins (i - attrStr.length) and then add the position within the attribute\n            //this gives us the absolute index in the entire xml, which we can use to find the line at last\n            return getErrorObject(isValid.err.code, isValid.err.msg, getLineNumberForPosition(xmlData, i - attrStr.length + isValid.err.line));\n          }\n\n          //if the root level has been reached before ...\n          if (reachedRoot === true) {\n            return getErrorObject('InvalidXml', 'Multiple possible root nodes found.', getLineNumberForPosition(xmlData, i));\n          } else if(options.unpairedTags.indexOf(tagName) !== -1){\n            //don't push into stack\n          } else {\n            tags.push({tagName, tagStartPos});\n          }\n          tagFound = true;\n        }\n\n        //skip tag text value\n        //It may include comments and CDATA value\n        for (i++; i < xmlData.length; i++) {\n          if (xmlData[i] === '<') {\n            if (xmlData[i + 1] === '!') {\n              //comment or CADATA\n              i++;\n              i = readCommentAndCDATA(xmlData, i);\n              continue;\n            } else if (xmlData[i+1] === '?') {\n              i = readPI(xmlData, ++i);\n              if (i.err) return i;\n            } else{\n              break;\n            }\n          } else if (xmlData[i] === '&') {\n            const afterAmp = validateAmpersand(xmlData, i);\n            if (afterAmp == -1)\n              return getErrorObject('InvalidChar', \"char '&' is not expected.\", getLineNumberForPosition(xmlData, i));\n            i = afterAmp;\n          }else{\n            if (reachedRoot === true && !isWhiteSpace(xmlData[i])) {\n              return getErrorObject('InvalidXml', \"Extra text at the end\", getLineNumberForPosition(xmlData, i));\n            }\n          }\n        } //end of reading tag text value\n        if (xmlData[i] === '<') {\n          i--;\n        }\n      }\n    } else {\n      if ( isWhiteSpace(xmlData[i])) {\n        continue;\n      }\n      return getErrorObject('InvalidChar', \"char '\"+xmlData[i]+\"' is not expected.\", getLineNumberForPosition(xmlData, i));\n    }\n  }\n\n  if (!tagFound) {\n    return getErrorObject('InvalidXml', 'Start tag expected.', 1);\n  }else if (tags.length == 1) {\n      return getErrorObject('InvalidTag', \"Unclosed tag '\"+tags[0].tagName+\"'.\", getLineNumberForPosition(xmlData, tags[0].tagStartPos));\n  }else if (tags.length > 0) {\n      return getErrorObject('InvalidXml', \"Invalid '\"+\n          JSON.stringify(tags.map(t => t.tagName), null, 4).replace(/\\r?\\n/g, '')+\n          \"' found.\", {line: 1, col: 1});\n  }\n\n  return true;\n};\n\nfunction isWhiteSpace(char){\n  return char === ' ' || char === '\\t' || char === '\\n'  || char === '\\r';\n}\n/**\n * Read Processing insstructions and skip\n * @param {*} xmlData\n * @param {*} i\n */\nfunction readPI(xmlData, i) {\n  const start = i;\n  for (; i < xmlData.length; i++) {\n    if (xmlData[i] == '?' || xmlData[i] == ' ') {\n      //tagname\n      const tagname = xmlData.substr(start, i - start);\n      if (i > 5 && tagname === 'xml') {\n        return getErrorObject('InvalidXml', 'XML declaration allowed only at the start of the document.', getLineNumberForPosition(xmlData, i));\n      } else if (xmlData[i] == '?' && xmlData[i + 1] == '>') {\n        //check if valid attribut string\n        i++;\n        break;\n      } else {\n        continue;\n      }\n    }\n  }\n  return i;\n}\n\nfunction readCommentAndCDATA(xmlData, i) {\n  if (xmlData.length > i + 5 && xmlData[i + 1] === '-' && xmlData[i + 2] === '-') {\n    //comment\n    for (i += 3; i < xmlData.length; i++) {\n      if (xmlData[i] === '-' && xmlData[i + 1] === '-' && xmlData[i + 2] === '>') {\n        i += 2;\n        break;\n      }\n    }\n  } else if (\n    xmlData.length > i + 8 &&\n    xmlData[i + 1] === 'D' &&\n    xmlData[i + 2] === 'O' &&\n    xmlData[i + 3] === 'C' &&\n    xmlData[i + 4] === 'T' &&\n    xmlData[i + 5] === 'Y' &&\n    xmlData[i + 6] === 'P' &&\n    xmlData[i + 7] === 'E'\n  ) {\n    let angleBracketsCount = 1;\n    for (i += 8; i < xmlData.length; i++) {\n      if (xmlData[i] === '<') {\n        angleBracketsCount++;\n      } else if (xmlData[i] === '>') {\n        angleBracketsCount--;\n        if (angleBracketsCount === 0) {\n          break;\n        }\n      }\n    }\n  } else if (\n    xmlData.length > i + 9 &&\n    xmlData[i + 1] === '[' &&\n    xmlData[i + 2] === 'C' &&\n    xmlData[i + 3] === 'D' &&\n    xmlData[i + 4] === 'A' &&\n    xmlData[i + 5] === 'T' &&\n    xmlData[i + 6] === 'A' &&\n    xmlData[i + 7] === '['\n  ) {\n    for (i += 8; i < xmlData.length; i++) {\n      if (xmlData[i] === ']' && xmlData[i + 1] === ']' && xmlData[i + 2] === '>') {\n        i += 2;\n        break;\n      }\n    }\n  }\n\n  return i;\n}\n\nconst doubleQuote = '\"';\nconst singleQuote = \"'\";\n\n/**\n * Keep reading xmlData until '<' is found outside the attribute value.\n * @param {string} xmlData\n * @param {number} i\n */\nfunction readAttributeStr(xmlData, i) {\n  let attrStr = '';\n  let startChar = '';\n  let tagClosed = false;\n  for (; i < xmlData.length; i++) {\n    if (xmlData[i] === doubleQuote || xmlData[i] === singleQuote) {\n      if (startChar === '') {\n        startChar = xmlData[i];\n      } else if (startChar !== xmlData[i]) {\n        //if vaue is enclosed with double quote then single quotes are allowed inside the value and vice versa\n      } else {\n        startChar = '';\n      }\n    } else if (xmlData[i] === '>') {\n      if (startChar === '') {\n        tagClosed = true;\n        break;\n      }\n    }\n    attrStr += xmlData[i];\n  }\n  if (startChar !== '') {\n    return false;\n  }\n\n  return {\n    value: attrStr,\n    index: i,\n    tagClosed: tagClosed\n  };\n}\n\n/**\n * Select all the attributes whether valid or invalid.\n */\nconst validAttrStrRegxp = new RegExp('(\\\\s*)([^\\\\s=]+)(\\\\s*=)?(\\\\s*([\\'\"])(([\\\\s\\\\S])*?)\\\\5)?', 'g');\n\n//attr, =\"sd\", a=\"amit's\", a=\"sd\"b=\"saf\", ab  cd=\"\"\n\nfunction validateAttributeString(attrStr, options) {\n  //console.log(\"start:\"+attrStr+\":end\");\n\n  //if(attrStr.trim().length === 0) return true; //empty string\n\n  const matches = util.getAllMatches(attrStr, validAttrStrRegxp);\n  const attrNames = {};\n\n  for (let i = 0; i < matches.length; i++) {\n    if (matches[i][1].length === 0) {\n      //nospace before attribute name: a=\"sd\"b=\"saf\"\n      return getErrorObject('InvalidAttr', \"Attribute '\"+matches[i][2]+\"' has no space in starting.\", getPositionFromMatch(matches[i]))\n    } else if (matches[i][3] !== undefined && matches[i][4] === undefined) {\n      return getErrorObject('InvalidAttr', \"Attribute '\"+matches[i][2]+\"' is without value.\", getPositionFromMatch(matches[i]));\n    } else if (matches[i][3] === undefined && !options.allowBooleanAttributes) {\n      //independent attribute: ab\n      return getErrorObject('InvalidAttr', \"boolean attribute '\"+matches[i][2]+\"' is not allowed.\", getPositionFromMatch(matches[i]));\n    }\n    /* else if(matches[i][6] === undefined){//attribute without value: ab=\n                    return { err: { code:\"InvalidAttr\",msg:\"attribute \" + matches[i][2] + \" has no value assigned.\"}};\n                } */\n    const attrName = matches[i][2];\n    if (!validateAttrName(attrName)) {\n      return getErrorObject('InvalidAttr', \"Attribute '\"+attrName+\"' is an invalid name.\", getPositionFromMatch(matches[i]));\n    }\n    if (!attrNames.hasOwnProperty(attrName)) {\n      //check for duplicate attribute.\n      attrNames[attrName] = 1;\n    } else {\n      return getErrorObject('InvalidAttr', \"Attribute '\"+attrName+\"' is repeated.\", getPositionFromMatch(matches[i]));\n    }\n  }\n\n  return true;\n}\n\nfunction validateNumberAmpersand(xmlData, i) {\n  let re = /\\d/;\n  if (xmlData[i] === 'x') {\n    i++;\n    re = /[\\da-fA-F]/;\n  }\n  for (; i < xmlData.length; i++) {\n    if (xmlData[i] === ';')\n      return i;\n    if (!xmlData[i].match(re))\n      break;\n  }\n  return -1;\n}\n\nfunction validateAmpersand(xmlData, i) {\n  // https://www.w3.org/TR/xml/#dt-charref\n  i++;\n  if (xmlData[i] === ';')\n    return -1;\n  if (xmlData[i] === '#') {\n    i++;\n    return validateNumberAmpersand(xmlData, i);\n  }\n  let count = 0;\n  for (; i < xmlData.length; i++, count++) {\n    if (xmlData[i].match(/\\w/) && count < 20)\n      continue;\n    if (xmlData[i] === ';')\n      break;\n    return -1;\n  }\n  return i;\n}\n\nfunction getErrorObject(code, message, lineNumber) {\n  return {\n    err: {\n      code: code,\n      msg: message,\n      line: lineNumber.line || lineNumber,\n      col: lineNumber.col,\n    },\n  };\n}\n\nfunction validateAttrName(attrName) {\n  return util.isName(attrName);\n}\n\n// const startsWithXML = /^xml/i;\n\nfunction validateTagName(tagname) {\n  return util.isName(tagname) /* && !tagname.match(startsWithXML) */;\n}\n\n//this function returns the line number for the character at the given index\nfunction getLineNumberForPosition(xmlData, index) {\n  const lines = xmlData.substring(0, index).split(/\\r?\\n/);\n  return {\n    line: lines.length,\n\n    // column number is last line's length + 1, because column numbering starts at 1:\n    col: lines[lines.length - 1].length + 1\n  };\n}\n\n//this function returns the position of the first character of match within attrStr\nfunction getPositionFromMatch(match) {\n  return match.startIndex + match[1].length;\n}\n","\nconst defaultOptions = {\n    preserveOrder: false,\n    attributeNamePrefix: '@_',\n    attributesGroupName: false,\n    textNodeName: '#text',\n    ignoreAttributes: true,\n    removeNSPrefix: false, // remove NS from tag name or attribute name if true\n    allowBooleanAttributes: false, //a tag can have attributes without any value\n    //ignoreRootElement : false,\n    parseTagValue: true,\n    parseAttributeValue: false,\n    trimValues: true, //Trim string values of tag and attributes\n    cdataPropName: false,\n    numberParseOptions: {\n      hex: true,\n      leadingZeros: true,\n      eNotation: true\n    },\n    tagValueProcessor: function(tagName, val) {\n      return val;\n    },\n    attributeValueProcessor: function(attrName, val) {\n      return val;\n    },\n    stopNodes: [], //nested tags will not be parsed even for errors\n    alwaysCreateTextNode: false,\n    isArray: () => false,\n    commentPropName: false,\n    unpairedTags: [],\n    processEntities: true,\n    htmlEntities: false,\n    ignoreDeclaration: false,\n    ignorePiTags: false,\n    transformTagName: false,\n    transformAttributeName: false,\n    updateTag: function(tagName, jPath, attrs){\n      return tagName\n    },\n    // skipEmptyListItem: false\n};\n   \nconst buildOptions = function(options) {\n    return Object.assign({}, defaultOptions, options);\n};\n\nexports.buildOptions = buildOptions;\nexports.defaultOptions = defaultOptions;","'use strict';\n\nclass XmlNode{\n  constructor(tagname) {\n    this.tagname = tagname;\n    this.child = []; //nested tags, text, cdata, comments in order\n    this[\":@\"] = {}; //attributes map\n  }\n  add(key,val){\n    // this.child.push( {name : key, val: val, isCdata: isCdata });\n    if(key === \"__proto__\") key = \"#__proto__\";\n    this.child.push( {[key]: val });\n  }\n  addChild(node) {\n    if(node.tagname === \"__proto__\") node.tagname = \"#__proto__\";\n    if(node[\":@\"] && Object.keys(node[\":@\"]).length > 0){\n      this.child.push( { [node.tagname]: node.child, [\":@\"]: node[\":@\"] });\n    }else{\n      this.child.push( { [node.tagname]: node.child });\n    }\n  };\n};\n\n\nmodule.exports = XmlNode;","const util = require('../util');\n\n//TODO: handle comments\nfunction readDocType(xmlData, i){\n    \n    const entities = {};\n    if( xmlData[i + 3] === 'O' &&\n         xmlData[i + 4] === 'C' &&\n         xmlData[i + 5] === 'T' &&\n         xmlData[i + 6] === 'Y' &&\n         xmlData[i + 7] === 'P' &&\n         xmlData[i + 8] === 'E')\n    {    \n        i = i+9;\n        let angleBracketsCount = 1;\n        let hasBody = false, comment = false;\n        let exp = \"\";\n        for(;i<xmlData.length;i++){\n            if (xmlData[i] === '<' && !comment) { //Determine the tag type\n                if( hasBody && isEntity(xmlData, i)){\n                    i += 7; \n                    [entityName, val,i] = readEntityExp(xmlData,i+1);\n                    if(val.indexOf(\"&\") === -1) //Parameter entities are not supported\n                        entities[ validateEntityName(entityName) ] = {\n                            regx : RegExp( `&${entityName};`,\"g\"),\n                            val: val\n                        };\n                }\n                else if( hasBody && isElement(xmlData, i))  i += 8;//Not supported\n                else if( hasBody && isAttlist(xmlData, i))  i += 8;//Not supported\n                else if( hasBody && isNotation(xmlData, i)) i += 9;//Not supported\n                else if( isComment)                         comment = true;\n                else                                        throw new Error(\"Invalid DOCTYPE\");\n\n                angleBracketsCount++;\n                exp = \"\";\n            } else if (xmlData[i] === '>') { //Read tag content\n                if(comment){\n                    if( xmlData[i - 1] === \"-\" && xmlData[i - 2] === \"-\"){\n                        comment = false;\n                        angleBracketsCount--;\n                    }\n                }else{\n                    angleBracketsCount--;\n                }\n                if (angleBracketsCount === 0) {\n                  break;\n                }\n            }else if( xmlData[i] === '['){\n                hasBody = true;\n            }else{\n                exp += xmlData[i];\n            }\n        }\n        if(angleBracketsCount !== 0){\n            throw new Error(`Unclosed DOCTYPE`);\n        }\n    }else{\n        throw new Error(`Invalid Tag instead of DOCTYPE`);\n    }\n    return {entities, i};\n}\n\nfunction readEntityExp(xmlData,i){\n    //External entities are not supported\n    //    <!ENTITY ext SYSTEM \"http://normal-website.com\" >\n\n    //Parameter entities are not supported\n    //    <!ENTITY entityname \"&anotherElement;\">\n\n    //Internal entities are supported\n    //    <!ENTITY entityname \"replacement text\">\n    \n    //read EntityName\n    let entityName = \"\";\n    for (; i < xmlData.length && (xmlData[i] !== \"'\" && xmlData[i] !== '\"' ); i++) {\n        // if(xmlData[i] === \" \") continue;\n        // else \n        entityName += xmlData[i];\n    }\n    entityName = entityName.trim();\n    if(entityName.indexOf(\" \") !== -1) throw new Error(\"External entites are not supported\");\n\n    //read Entity Value\n    const startChar = xmlData[i++];\n    let val = \"\"\n    for (; i < xmlData.length && xmlData[i] !== startChar ; i++) {\n        val += xmlData[i];\n    }\n    return [entityName, val, i];\n}\n\nfunction isComment(xmlData, i){\n    if(xmlData[i+1] === '!' &&\n    xmlData[i+2] === '-' &&\n    xmlData[i+3] === '-') return true\n    return false\n}\nfunction isEntity(xmlData, i){\n    if(xmlData[i+1] === '!' &&\n    xmlData[i+2] === 'E' &&\n    xmlData[i+3] === 'N' &&\n    xmlData[i+4] === 'T' &&\n    xmlData[i+5] === 'I' &&\n    xmlData[i+6] === 'T' &&\n    xmlData[i+7] === 'Y') return true\n    return false\n}\nfunction isElement(xmlData, i){\n    if(xmlData[i+1] === '!' &&\n    xmlData[i+2] === 'E' &&\n    xmlData[i+3] === 'L' &&\n    xmlData[i+4] === 'E' &&\n    xmlData[i+5] === 'M' &&\n    xmlData[i+6] === 'E' &&\n    xmlData[i+7] === 'N' &&\n    xmlData[i+8] === 'T') return true\n    return false\n}\n\nfunction isAttlist(xmlData, i){\n    if(xmlData[i+1] === '!' &&\n    xmlData[i+2] === 'A' &&\n    xmlData[i+3] === 'T' &&\n    xmlData[i+4] === 'T' &&\n    xmlData[i+5] === 'L' &&\n    xmlData[i+6] === 'I' &&\n    xmlData[i+7] === 'S' &&\n    xmlData[i+8] === 'T') return true\n    return false\n}\nfunction isNotation(xmlData, i){\n    if(xmlData[i+1] === '!' &&\n    xmlData[i+2] === 'N' &&\n    xmlData[i+3] === 'O' &&\n    xmlData[i+4] === 'T' &&\n    xmlData[i+5] === 'A' &&\n    xmlData[i+6] === 'T' &&\n    xmlData[i+7] === 'I' &&\n    xmlData[i+8] === 'O' &&\n    xmlData[i+9] === 'N') return true\n    return false\n}\n\nfunction validateEntityName(name){\n    if (util.isName(name))\n\treturn name;\n    else\n        throw new Error(`Invalid entity name ${name}`);\n}\n\nmodule.exports = readDocType;\n","const hexRegex = /^[-+]?0x[a-fA-F0-9]+$/;\nconst numRegex = /^([\\-\\+])?(0*)(\\.[0-9]+([eE]\\-?[0-9]+)?|[0-9]+(\\.[0-9]+([eE]\\-?[0-9]+)?)?)$/;\n// const octRegex = /0x[a-z0-9]+/;\n// const binRegex = /0x[a-z0-9]+/;\n\n\n//polyfill\nif (!Number.parseInt && window.parseInt) {\n    Number.parseInt = window.parseInt;\n}\nif (!Number.parseFloat && window.parseFloat) {\n    Number.parseFloat = window.parseFloat;\n}\n\n  \nconst consider = {\n    hex :  true,\n    leadingZeros: true,\n    decimalPoint: \"\\.\",\n    eNotation: true\n    //skipLike: /regex/\n};\n\nfunction toNumber(str, options = {}){\n    // const options = Object.assign({}, consider);\n    // if(opt.leadingZeros === false){\n    //     options.leadingZeros = false;\n    // }else if(opt.hex === false){\n    //     options.hex = false;\n    // }\n\n    options = Object.assign({}, consider, options );\n    if(!str || typeof str !== \"string\" ) return str;\n    \n    let trimmedStr  = str.trim();\n    // if(trimmedStr === \"0.0\") return 0;\n    // else if(trimmedStr === \"+0.0\") return 0;\n    // else if(trimmedStr === \"-0.0\") return -0;\n\n    if(options.skipLike !== undefined && options.skipLike.test(trimmedStr)) return str;\n    else if (options.hex && hexRegex.test(trimmedStr)) {\n        return Number.parseInt(trimmedStr, 16);\n    // } else if (options.parseOct && octRegex.test(str)) {\n    //     return Number.parseInt(val, 8);\n    // }else if (options.parseBin && binRegex.test(str)) {\n    //     return Number.parseInt(val, 2);\n    }else{\n        //separate negative sign, leading zeros, and rest number\n        const match = numRegex.exec(trimmedStr);\n        if(match){\n            const sign = match[1];\n            const leadingZeros = match[2];\n            let numTrimmedByZeros = trimZeros(match[3]); //complete num without leading zeros\n            //trim ending zeros for floating number\n            \n            const eNotation = match[4] || match[6];\n            if(!options.leadingZeros && leadingZeros.length > 0 && sign && trimmedStr[2] !== \".\") return str; //-0123\n            else if(!options.leadingZeros && leadingZeros.length > 0 && !sign && trimmedStr[1] !== \".\") return str; //0123\n            else{//no leading zeros or leading zeros are allowed\n                const num = Number(trimmedStr);\n                const numStr = \"\" + num;\n                if(numStr.search(/[eE]/) !== -1){ //given number is long and parsed to eNotation\n                    if(options.eNotation) return num;\n                    else return str;\n                }else if(eNotation){ //given number has enotation\n                    if(options.eNotation) return num;\n                    else return str;\n                }else if(trimmedStr.indexOf(\".\") !== -1){ //floating number\n                    // const decimalPart = match[5].substr(1);\n                    // const intPart = trimmedStr.substr(0,trimmedStr.indexOf(\".\"));\n\n                    \n                    // const p = numStr.indexOf(\".\");\n                    // const givenIntPart = numStr.substr(0,p);\n                    // const givenDecPart = numStr.substr(p+1);\n                    if(numStr === \"0\" && (numTrimmedByZeros === \"\") ) return num; //0.0\n                    else if(numStr === numTrimmedByZeros) return num; //0.456. 0.79000\n                    else if( sign && numStr === \"-\"+numTrimmedByZeros) return num;\n                    else return str;\n                }\n                \n                if(leadingZeros){\n                    // if(numTrimmedByZeros === numStr){\n                    //     if(options.leadingZeros) return num;\n                    //     else return str;\n                    // }else return str;\n                    if(numTrimmedByZeros === numStr) return num;\n                    else if(sign+numTrimmedByZeros === numStr) return num;\n                    else return str;\n                }\n\n                if(trimmedStr === numStr) return num;\n                else if(trimmedStr === sign+numStr) return num;\n                // else{\n                //     //number with +/- sign\n                //     trimmedStr.test(/[-+][0-9]);\n\n                // }\n                return str;\n            }\n            // else if(!eNotation && trimmedStr && trimmedStr !== Number(trimmedStr) ) return str;\n            \n        }else{ //non-numeric string\n            return str;\n        }\n    }\n}\n\n/**\n * \n * @param {string} numStr without leading zeros\n * @returns \n */\nfunction trimZeros(numStr){\n    if(numStr && numStr.indexOf(\".\") !== -1){//float\n        numStr = numStr.replace(/0+$/, \"\"); //remove ending zeros\n        if(numStr === \".\")  numStr = \"0\";\n        else if(numStr[0] === \".\")  numStr = \"0\"+numStr;\n        else if(numStr[numStr.length-1] === \".\")  numStr = numStr.substr(0,numStr.length-1);\n        return numStr;\n    }\n    return numStr;\n}\nmodule.exports = toNumber\n","'use strict';\n///@ts-check\n\nconst util = require('../util');\nconst xmlNode = require('./xmlNode');\nconst readDocType = require(\"./DocTypeReader\");\nconst toNumber = require(\"strnum\");\n\n// const regx =\n//   '<((!\\\\[CDATA\\\\[([\\\\s\\\\S]*?)(]]>))|((NAME:)?(NAME))([^>]*)>|((\\\\/)(NAME)\\\\s*>))([^<]*)'\n//   .replace(/NAME/g, util.nameRegexp);\n\n//const tagsRegx = new RegExp(\"<(\\\\/?[\\\\w:\\\\-\\._]+)([^>]*)>(\\\\s*\"+cdataRegx+\")*([^<]+)?\",\"g\");\n//const tagsRegx = new RegExp(\"<(\\\\/?)((\\\\w*:)?([\\\\w:\\\\-\\._]+))([^>]*)>([^<]*)(\"+cdataRegx+\"([^<]*))*([^<]+)?\",\"g\");\n\nclass OrderedObjParser{\n  constructor(options){\n    this.options = options;\n    this.currentNode = null;\n    this.tagsNodeStack = [];\n    this.docTypeEntities = {};\n    this.lastEntities = {\n      \"apos\" : { regex: /&(apos|#39|#x27);/g, val : \"'\"},\n      \"gt\" : { regex: /&(gt|#62|#x3E);/g, val : \">\"},\n      \"lt\" : { regex: /&(lt|#60|#x3C);/g, val : \"<\"},\n      \"quot\" : { regex: /&(quot|#34|#x22);/g, val : \"\\\"\"},\n    };\n    this.ampEntity = { regex: /&(amp|#38|#x26);/g, val : \"&\"};\n    this.htmlEntities = {\n      \"space\": { regex: /&(nbsp|#160);/g, val: \" \" },\n      // \"lt\" : { regex: /&(lt|#60);/g, val: \"<\" },\n      // \"gt\" : { regex: /&(gt|#62);/g, val: \">\" },\n      // \"amp\" : { regex: /&(amp|#38);/g, val: \"&\" },\n      // \"quot\" : { regex: /&(quot|#34);/g, val: \"\\\"\" },\n      // \"apos\" : { regex: /&(apos|#39);/g, val: \"'\" },\n      \"cent\" : { regex: /&(cent|#162);/g, val: \"¢\" },\n      \"pound\" : { regex: /&(pound|#163);/g, val: \"£\" },\n      \"yen\" : { regex: /&(yen|#165);/g, val: \"¥\" },\n      \"euro\" : { regex: /&(euro|#8364);/g, val: \"€\" },\n      \"copyright\" : { regex: /&(copy|#169);/g, val: \"©\" },\n      \"reg\" : { regex: /&(reg|#174);/g, val: \"®\" },\n      \"inr\" : { regex: /&(inr|#8377);/g, val: \"₹\" },\n      \"num_dec\": { regex: /&#([0-9]{1,7});/g, val : (_, str) => String.fromCharCode(Number.parseInt(str, 10)) },\n      \"num_hex\": { regex: /&#x([0-9a-fA-F]{1,6});/g, val : (_, str) => String.fromCharCode(Number.parseInt(str, 16)) },\n    };\n    this.addExternalEntities = addExternalEntities;\n    this.parseXml = parseXml;\n    this.parseTextData = parseTextData;\n    this.resolveNameSpace = resolveNameSpace;\n    this.buildAttributesMap = buildAttributesMap;\n    this.isItStopNode = isItStopNode;\n    this.replaceEntitiesValue = replaceEntitiesValue;\n    this.readStopNodeData = readStopNodeData;\n    this.saveTextToParentTag = saveTextToParentTag;\n    this.addChild = addChild;\n  }\n\n}\n\nfunction addExternalEntities(externalEntities){\n  const entKeys = Object.keys(externalEntities);\n  for (let i = 0; i < entKeys.length; i++) {\n    const ent = entKeys[i];\n    this.lastEntities[ent] = {\n       regex: new RegExp(\"&\"+ent+\";\",\"g\"),\n       val : externalEntities[ent]\n    }\n  }\n}\n\n/**\n * @param {string} val\n * @param {string} tagName\n * @param {string} jPath\n * @param {boolean} dontTrim\n * @param {boolean} hasAttributes\n * @param {boolean} isLeafNode\n * @param {boolean} escapeEntities\n */\nfunction parseTextData(val, tagName, jPath, dontTrim, hasAttributes, isLeafNode, escapeEntities) {\n  if (val !== undefined) {\n    if (this.options.trimValues && !dontTrim) {\n      val = val.trim();\n    }\n    if(val.length > 0){\n      if(!escapeEntities) val = this.replaceEntitiesValue(val);\n      \n      const newval = this.options.tagValueProcessor(tagName, val, jPath, hasAttributes, isLeafNode);\n      if(newval === null || newval === undefined){\n        //don't parse\n        return val;\n      }else if(typeof newval !== typeof val || newval !== val){\n        //overwrite\n        return newval;\n      }else if(this.options.trimValues){\n        return parseValue(val, this.options.parseTagValue, this.options.numberParseOptions);\n      }else{\n        const trimmedVal = val.trim();\n        if(trimmedVal === val){\n          return parseValue(val, this.options.parseTagValue, this.options.numberParseOptions);\n        }else{\n          return val;\n        }\n      }\n    }\n  }\n}\n\nfunction resolveNameSpace(tagname) {\n  if (this.options.removeNSPrefix) {\n    const tags = tagname.split(':');\n    const prefix = tagname.charAt(0) === '/' ? '/' : '';\n    if (tags[0] === 'xmlns') {\n      return '';\n    }\n    if (tags.length === 2) {\n      tagname = prefix + tags[1];\n    }\n  }\n  return tagname;\n}\n\n//TODO: change regex to capture NS\n//const attrsRegx = new RegExp(\"([\\\\w\\\\-\\\\.\\\\:]+)\\\\s*=\\\\s*(['\\\"])((.|\\n)*?)\\\\2\",\"gm\");\nconst attrsRegx = new RegExp('([^\\\\s=]+)\\\\s*(=\\\\s*([\\'\"])([\\\\s\\\\S]*?)\\\\3)?', 'gm');\n\nfunction buildAttributesMap(attrStr, jPath, tagName) {\n  if (!this.options.ignoreAttributes && typeof attrStr === 'string') {\n    // attrStr = attrStr.replace(/\\r?\\n/g, ' ');\n    //attrStr = attrStr || attrStr.trim();\n\n    const matches = util.getAllMatches(attrStr, attrsRegx);\n    const len = matches.length; //don't make it inline\n    const attrs = {};\n    for (let i = 0; i < len; i++) {\n      const attrName = this.resolveNameSpace(matches[i][1]);\n      let oldVal = matches[i][4];\n      let aName = this.options.attributeNamePrefix + attrName;\n      if (attrName.length) {\n        if (this.options.transformAttributeName) {\n          aName = this.options.transformAttributeName(aName);\n        }\n        if(aName === \"__proto__\") aName  = \"#__proto__\";\n        if (oldVal !== undefined) {\n          if (this.options.trimValues) {\n            oldVal = oldVal.trim();\n          }\n          oldVal = this.replaceEntitiesValue(oldVal);\n          const newVal = this.options.attributeValueProcessor(attrName, oldVal, jPath);\n          if(newVal === null || newVal === undefined){\n            //don't parse\n            attrs[aName] = oldVal;\n          }else if(typeof newVal !== typeof oldVal || newVal !== oldVal){\n            //overwrite\n            attrs[aName] = newVal;\n          }else{\n            //parse\n            attrs[aName] = parseValue(\n              oldVal,\n              this.options.parseAttributeValue,\n              this.options.numberParseOptions\n            );\n          }\n        } else if (this.options.allowBooleanAttributes) {\n          attrs[aName] = true;\n        }\n      }\n    }\n    if (!Object.keys(attrs).length) {\n      return;\n    }\n    if (this.options.attributesGroupName) {\n      const attrCollection = {};\n      attrCollection[this.options.attributesGroupName] = attrs;\n      return attrCollection;\n    }\n    return attrs\n  }\n}\n\nconst parseXml = function(xmlData) {\n  xmlData = xmlData.replace(/\\r\\n?/g, \"\\n\"); //TODO: remove this line\n  const xmlObj = new xmlNode('!xml');\n  let currentNode = xmlObj;\n  let textData = \"\";\n  let jPath = \"\";\n  for(let i=0; i< xmlData.length; i++){//for each char in XML data\n    const ch = xmlData[i];\n    if(ch === '<'){\n      // const nextIndex = i+1;\n      // const _2ndChar = xmlData[nextIndex];\n      if( xmlData[i+1] === '/') {//Closing Tag\n        const closeIndex = findClosingIndex(xmlData, \">\", i, \"Closing Tag is not closed.\")\n        let tagName = xmlData.substring(i+2,closeIndex).trim();\n\n        if(this.options.removeNSPrefix){\n          const colonIndex = tagName.indexOf(\":\");\n          if(colonIndex !== -1){\n            tagName = tagName.substr(colonIndex+1);\n          }\n        }\n\n        if(this.options.transformTagName) {\n          tagName = this.options.transformTagName(tagName);\n        }\n\n        if(currentNode){\n          textData = this.saveTextToParentTag(textData, currentNode, jPath);\n        }\n\n        //check if last tag of nested tag was unpaired tag\n        const lastTagName = jPath.substring(jPath.lastIndexOf(\".\")+1);\n        if(tagName && this.options.unpairedTags.indexOf(tagName) !== -1 ){\n          throw new Error(`Unpaired tag can not be used as closing tag: </${tagName}>`);\n        }\n        let propIndex = 0\n        if(lastTagName && this.options.unpairedTags.indexOf(lastTagName) !== -1 ){\n          propIndex = jPath.lastIndexOf('.', jPath.lastIndexOf('.')-1)\n          this.tagsNodeStack.pop();\n        }else{\n          propIndex = jPath.lastIndexOf(\".\");\n        }\n        jPath = jPath.substring(0, propIndex);\n\n        currentNode = this.tagsNodeStack.pop();//avoid recursion, set the parent tag scope\n        textData = \"\";\n        i = closeIndex;\n      } else if( xmlData[i+1] === '?') {\n\n        let tagData = readTagExp(xmlData,i, false, \"?>\");\n        if(!tagData) throw new Error(\"Pi Tag is not closed.\");\n\n        textData = this.saveTextToParentTag(textData, currentNode, jPath);\n        if( (this.options.ignoreDeclaration && tagData.tagName === \"?xml\") || this.options.ignorePiTags){\n\n        }else{\n  \n          const childNode = new xmlNode(tagData.tagName);\n          childNode.add(this.options.textNodeName, \"\");\n          \n          if(tagData.tagName !== tagData.tagExp && tagData.attrExpPresent){\n            childNode[\":@\"] = this.buildAttributesMap(tagData.tagExp, jPath, tagData.tagName);\n          }\n          this.addChild(currentNode, childNode, jPath)\n\n        }\n\n\n        i = tagData.closeIndex + 1;\n      } else if(xmlData.substr(i + 1, 3) === '!--') {\n        const endIndex = findClosingIndex(xmlData, \"-->\", i+4, \"Comment is not closed.\")\n        if(this.options.commentPropName){\n          const comment = xmlData.substring(i + 4, endIndex - 2);\n\n          textData = this.saveTextToParentTag(textData, currentNode, jPath);\n\n          currentNode.add(this.options.commentPropName, [ { [this.options.textNodeName] : comment } ]);\n        }\n        i = endIndex;\n      } else if( xmlData.substr(i + 1, 2) === '!D') {\n        const result = readDocType(xmlData, i);\n        this.docTypeEntities = result.entities;\n        i = result.i;\n      }else if(xmlData.substr(i + 1, 2) === '![') {\n        const closeIndex = findClosingIndex(xmlData, \"]]>\", i, \"CDATA is not closed.\") - 2;\n        const tagExp = xmlData.substring(i + 9,closeIndex);\n\n        textData = this.saveTextToParentTag(textData, currentNode, jPath);\n\n        let val = this.parseTextData(tagExp, currentNode.tagname, jPath, true, false, true, true);\n        if(val == undefined) val = \"\";\n\n        //cdata should be set even if it is 0 length string\n        if(this.options.cdataPropName){\n          currentNode.add(this.options.cdataPropName, [ { [this.options.textNodeName] : tagExp } ]);\n        }else{\n          currentNode.add(this.options.textNodeName, val);\n        }\n        \n        i = closeIndex + 2;\n      }else {//Opening tag\n        let result = readTagExp(xmlData,i, this.options.removeNSPrefix);\n        let tagName= result.tagName;\n        const rawTagName = result.rawTagName;\n        let tagExp = result.tagExp;\n        let attrExpPresent = result.attrExpPresent;\n        let closeIndex = result.closeIndex;\n\n        if (this.options.transformTagName) {\n          tagName = this.options.transformTagName(tagName);\n        }\n        \n        //save text as child node\n        if (currentNode && textData) {\n          if(currentNode.tagname !== '!xml'){\n            //when nested tag is found\n            textData = this.saveTextToParentTag(textData, currentNode, jPath, false);\n          }\n        }\n\n        //check if last tag was unpaired tag\n        const lastTag = currentNode;\n        if(lastTag && this.options.unpairedTags.indexOf(lastTag.tagname) !== -1 ){\n          currentNode = this.tagsNodeStack.pop();\n          jPath = jPath.substring(0, jPath.lastIndexOf(\".\"));\n        }\n        if(tagName !== xmlObj.tagname){\n          jPath += jPath ? \".\" + tagName : tagName;\n        }\n        if (this.isItStopNode(this.options.stopNodes, jPath, tagName)) {\n          let tagContent = \"\";\n          //self-closing tag\n          if(tagExp.length > 0 && tagExp.lastIndexOf(\"/\") === tagExp.length - 1){\n            i = result.closeIndex;\n          }\n          //unpaired tag\n          else if(this.options.unpairedTags.indexOf(tagName) !== -1){\n            i = result.closeIndex;\n          }\n          //normal tag\n          else{\n            //read until closing tag is found\n            const result = this.readStopNodeData(xmlData, rawTagName, closeIndex + 1);\n            if(!result) throw new Error(`Unexpected end of ${rawTagName}`);\n            i = result.i;\n            tagContent = result.tagContent;\n          }\n\n          const childNode = new xmlNode(tagName);\n          if(tagName !== tagExp && attrExpPresent){\n            childNode[\":@\"] = this.buildAttributesMap(tagExp, jPath, tagName);\n          }\n          if(tagContent) {\n            tagContent = this.parseTextData(tagContent, tagName, jPath, true, attrExpPresent, true, true);\n          }\n          \n          jPath = jPath.substr(0, jPath.lastIndexOf(\".\"));\n          childNode.add(this.options.textNodeName, tagContent);\n          \n          this.addChild(currentNode, childNode, jPath)\n        }else{\n  //selfClosing tag\n          if(tagExp.length > 0 && tagExp.lastIndexOf(\"/\") === tagExp.length - 1){\n            if(tagName[tagName.length - 1] === \"/\"){ //remove trailing '/'\n              tagName = tagName.substr(0, tagName.length - 1);\n              jPath = jPath.substr(0, jPath.length - 1);\n              tagExp = tagName;\n            }else{\n              tagExp = tagExp.substr(0, tagExp.length - 1);\n            }\n            \n            if(this.options.transformTagName) {\n              tagName = this.options.transformTagName(tagName);\n            }\n\n            const childNode = new xmlNode(tagName);\n            if(tagName !== tagExp && attrExpPresent){\n              childNode[\":@\"] = this.buildAttributesMap(tagExp, jPath, tagName);\n            }\n            this.addChild(currentNode, childNode, jPath)\n            jPath = jPath.substr(0, jPath.lastIndexOf(\".\"));\n          }\n    //opening tag\n          else{\n            const childNode = new xmlNode( tagName);\n            this.tagsNodeStack.push(currentNode);\n            \n            if(tagName !== tagExp && attrExpPresent){\n              childNode[\":@\"] = this.buildAttributesMap(tagExp, jPath, tagName);\n            }\n            this.addChild(currentNode, childNode, jPath)\n            currentNode = childNode;\n          }\n          textData = \"\";\n          i = closeIndex;\n        }\n      }\n    }else{\n      textData += xmlData[i];\n    }\n  }\n  return xmlObj.child;\n}\n\nfunction addChild(currentNode, childNode, jPath){\n  const result = this.options.updateTag(childNode.tagname, jPath, childNode[\":@\"])\n  if(result === false){\n  }else if(typeof result === \"string\"){\n    childNode.tagname = result\n    currentNode.addChild(childNode);\n  }else{\n    currentNode.addChild(childNode);\n  }\n}\n\nconst replaceEntitiesValue = function(val){\n\n  if(this.options.processEntities){\n    for(let entityName in this.docTypeEntities){\n      const entity = this.docTypeEntities[entityName];\n      val = val.replace( entity.regx, entity.val);\n    }\n    for(let entityName in this.lastEntities){\n      const entity = this.lastEntities[entityName];\n      val = val.replace( entity.regex, entity.val);\n    }\n    if(this.options.htmlEntities){\n      for(let entityName in this.htmlEntities){\n        const entity = this.htmlEntities[entityName];\n        val = val.replace( entity.regex, entity.val);\n      }\n    }\n    val = val.replace( this.ampEntity.regex, this.ampEntity.val);\n  }\n  return val;\n}\nfunction saveTextToParentTag(textData, currentNode, jPath, isLeafNode) {\n  if (textData) { //store previously collected data as textNode\n    if(isLeafNode === undefined) isLeafNode = Object.keys(currentNode.child).length === 0\n    \n    textData = this.parseTextData(textData,\n      currentNode.tagname,\n      jPath,\n      false,\n      currentNode[\":@\"] ? Object.keys(currentNode[\":@\"]).length !== 0 : false,\n      isLeafNode);\n\n    if (textData !== undefined && textData !== \"\")\n      currentNode.add(this.options.textNodeName, textData);\n    textData = \"\";\n  }\n  return textData;\n}\n\n//TODO: use jPath to simplify the logic\n/**\n * \n * @param {string[]} stopNodes \n * @param {string} jPath\n * @param {string} currentTagName \n */\nfunction isItStopNode(stopNodes, jPath, currentTagName){\n  const allNodesExp = \"*.\" + currentTagName;\n  for (const stopNodePath in stopNodes) {\n    const stopNodeExp = stopNodes[stopNodePath];\n    if( allNodesExp === stopNodeExp || jPath === stopNodeExp  ) return true;\n  }\n  return false;\n}\n\n/**\n * Returns the tag Expression and where it is ending handling single-double quotes situation\n * @param {string} xmlData \n * @param {number} i starting index\n * @returns \n */\nfunction tagExpWithClosingIndex(xmlData, i, closingChar = \">\"){\n  let attrBoundary;\n  let tagExp = \"\";\n  for (let index = i; index < xmlData.length; index++) {\n    let ch = xmlData[index];\n    if (attrBoundary) {\n        if (ch === attrBoundary) attrBoundary = \"\";//reset\n    } else if (ch === '\"' || ch === \"'\") {\n        attrBoundary = ch;\n    } else if (ch === closingChar[0]) {\n      if(closingChar[1]){\n        if(xmlData[index + 1] === closingChar[1]){\n          return {\n            data: tagExp,\n            index: index\n          }\n        }\n      }else{\n        return {\n          data: tagExp,\n          index: index\n        }\n      }\n    } else if (ch === '\\t') {\n      ch = \" \"\n    }\n    tagExp += ch;\n  }\n}\n\nfunction findClosingIndex(xmlData, str, i, errMsg){\n  const closingIndex = xmlData.indexOf(str, i);\n  if(closingIndex === -1){\n    throw new Error(errMsg)\n  }else{\n    return closingIndex + str.length - 1;\n  }\n}\n\nfunction readTagExp(xmlData,i, removeNSPrefix, closingChar = \">\"){\n  const result = tagExpWithClosingIndex(xmlData, i+1, closingChar);\n  if(!result) return;\n  let tagExp = result.data;\n  const closeIndex = result.index;\n  const separatorIndex = tagExp.search(/\\s/);\n  let tagName = tagExp;\n  let attrExpPresent = true;\n  if(separatorIndex !== -1){//separate tag name and attributes expression\n    tagName = tagExp.substring(0, separatorIndex);\n    tagExp = tagExp.substring(separatorIndex + 1).trimStart();\n  }\n\n  const rawTagName = tagName;\n  if(removeNSPrefix){\n    const colonIndex = tagName.indexOf(\":\");\n    if(colonIndex !== -1){\n      tagName = tagName.substr(colonIndex+1);\n      attrExpPresent = tagName !== result.data.substr(colonIndex + 1);\n    }\n  }\n\n  return {\n    tagName: tagName,\n    tagExp: tagExp,\n    closeIndex: closeIndex,\n    attrExpPresent: attrExpPresent,\n    rawTagName: rawTagName,\n  }\n}\n/**\n * find paired tag for a stop node\n * @param {string} xmlData \n * @param {string} tagName \n * @param {number} i \n */\nfunction readStopNodeData(xmlData, tagName, i){\n  const startIndex = i;\n  // Starting at 1 since we already have an open tag\n  let openTagCount = 1;\n\n  for (; i < xmlData.length; i++) {\n    if( xmlData[i] === \"<\"){ \n      if (xmlData[i+1] === \"/\") {//close tag\n          const closeIndex = findClosingIndex(xmlData, \">\", i, `${tagName} is not closed`);\n          let closeTagName = xmlData.substring(i+2,closeIndex).trim();\n          if(closeTagName === tagName){\n            openTagCount--;\n            if (openTagCount === 0) {\n              return {\n                tagContent: xmlData.substring(startIndex, i),\n                i : closeIndex\n              }\n            }\n          }\n          i=closeIndex;\n        } else if(xmlData[i+1] === '?') { \n          const closeIndex = findClosingIndex(xmlData, \"?>\", i+1, \"StopNode is not closed.\")\n          i=closeIndex;\n        } else if(xmlData.substr(i + 1, 3) === '!--') { \n          const closeIndex = findClosingIndex(xmlData, \"-->\", i+3, \"StopNode is not closed.\")\n          i=closeIndex;\n        } else if(xmlData.substr(i + 1, 2) === '![') { \n          const closeIndex = findClosingIndex(xmlData, \"]]>\", i, \"StopNode is not closed.\") - 2;\n          i=closeIndex;\n        } else {\n          const tagData = readTagExp(xmlData, i, '>')\n\n          if (tagData) {\n            const openTagName = tagData && tagData.tagName;\n            if (openTagName === tagName && tagData.tagExp[tagData.tagExp.length-1] !== \"/\") {\n              openTagCount++;\n            }\n            i=tagData.closeIndex;\n          }\n        }\n      }\n  }//end for loop\n}\n\nfunction parseValue(val, shouldParse, options) {\n  if (shouldParse && typeof val === 'string') {\n    //console.log(options)\n    const newval = val.trim();\n    if(newval === 'true' ) return true;\n    else if(newval === 'false' ) return false;\n    else return toNumber(val, options);\n  } else {\n    if (util.isExist(val)) {\n      return val;\n    } else {\n      return '';\n    }\n  }\n}\n\n\nmodule.exports = OrderedObjParser;\n","'use strict';\n\n/**\n * \n * @param {array} node \n * @param {any} options \n * @returns \n */\nfunction prettify(node, options){\n  return compress( node, options);\n}\n\n/**\n * \n * @param {array} arr \n * @param {object} options \n * @param {string} jPath \n * @returns object\n */\nfunction compress(arr, options, jPath){\n  let text;\n  const compressedObj = {};\n  for (let i = 0; i < arr.length; i++) {\n    const tagObj = arr[i];\n    const property = propName(tagObj);\n    let newJpath = \"\";\n    if(jPath === undefined) newJpath = property;\n    else newJpath = jPath + \".\" + property;\n\n    if(property === options.textNodeName){\n      if(text === undefined) text = tagObj[property];\n      else text += \"\" + tagObj[property];\n    }else if(property === undefined){\n      continue;\n    }else if(tagObj[property]){\n      \n      let val = compress(tagObj[property], options, newJpath);\n      const isLeaf = isLeafTag(val, options);\n\n      if(tagObj[\":@\"]){\n        assignAttributes( val, tagObj[\":@\"], newJpath, options);\n      }else if(Object.keys(val).length === 1 && val[options.textNodeName] !== undefined && !options.alwaysCreateTextNode){\n        val = val[options.textNodeName];\n      }else if(Object.keys(val).length === 0){\n        if(options.alwaysCreateTextNode) val[options.textNodeName] = \"\";\n        else val = \"\";\n      }\n\n      if(compressedObj[property] !== undefined && compressedObj.hasOwnProperty(property)) {\n        if(!Array.isArray(compressedObj[property])) {\n            compressedObj[property] = [ compressedObj[property] ];\n        }\n        compressedObj[property].push(val);\n      }else{\n        //TODO: if a node is not an array, then check if it should be an array\n        //also determine if it is a leaf node\n        if (options.isArray(property, newJpath, isLeaf )) {\n          compressedObj[property] = [val];\n        }else{\n          compressedObj[property] = val;\n        }\n      }\n    }\n    \n  }\n  // if(text && text.length > 0) compressedObj[options.textNodeName] = text;\n  if(typeof text === \"string\"){\n    if(text.length > 0) compressedObj[options.textNodeName] = text;\n  }else if(text !== undefined) compressedObj[options.textNodeName] = text;\n  return compressedObj;\n}\n\nfunction propName(obj){\n  const keys = Object.keys(obj);\n  for (let i = 0; i < keys.length; i++) {\n    const key = keys[i];\n    if(key !== \":@\") return key;\n  }\n}\n\nfunction assignAttributes(obj, attrMap, jpath, options){\n  if (attrMap) {\n    const keys = Object.keys(attrMap);\n    const len = keys.length; //don't make it inline\n    for (let i = 0; i < len; i++) {\n      const atrrName = keys[i];\n      if (options.isArray(atrrName, jpath + \".\" + atrrName, true, true)) {\n        obj[atrrName] = [ attrMap[atrrName] ];\n      } else {\n        obj[atrrName] = attrMap[atrrName];\n      }\n    }\n  }\n}\n\nfunction isLeafTag(obj, options){\n  const { textNodeName } = options;\n  const propCount = Object.keys(obj).length;\n  \n  if (propCount === 0) {\n    return true;\n  }\n\n  if (\n    propCount === 1 &&\n    (obj[textNodeName] || typeof obj[textNodeName] === \"boolean\" || obj[textNodeName] === 0)\n  ) {\n    return true;\n  }\n\n  return false;\n}\nexports.prettify = prettify;\n","const { buildOptions} = require(\"./OptionsBuilder\");\nconst OrderedObjParser = require(\"./OrderedObjParser\");\nconst { prettify} = require(\"./node2json\");\nconst validator = require('../validator');\n\nclass XMLParser{\n    \n    constructor(options){\n        this.externalEntities = {};\n        this.options = buildOptions(options);\n        \n    }\n    /**\n     * Parse XML dats to JS object \n     * @param {string|Buffer} xmlData \n     * @param {boolean|Object} validationOption \n     */\n    parse(xmlData,validationOption){\n        if(typeof xmlData === \"string\"){\n        }else if( xmlData.toString){\n            xmlData = xmlData.toString();\n        }else{\n            throw new Error(\"XML data is accepted in String or Bytes[] form.\")\n        }\n        if( validationOption){\n            if(validationOption === true) validationOption = {}; //validate with default options\n            \n            const result = validator.validate(xmlData, validationOption);\n            if (result !== true) {\n              throw Error( `${result.err.msg}:${result.err.line}:${result.err.col}` )\n            }\n          }\n        const orderedObjParser = new OrderedObjParser(this.options);\n        orderedObjParser.addExternalEntities(this.externalEntities);\n        const orderedResult = orderedObjParser.parseXml(xmlData);\n        if(this.options.preserveOrder || orderedResult === undefined) return orderedResult;\n        else return prettify(orderedResult, this.options);\n    }\n\n    /**\n     * Add Entity which is not by default supported by this library\n     * @param {string} key \n     * @param {string} value \n     */\n    addEntity(key, value){\n        if(value.indexOf(\"&\") !== -1){\n            throw new Error(\"Entity value can't have '&'\")\n        }else if(key.indexOf(\"&\") !== -1 || key.indexOf(\";\") !== -1){\n            throw new Error(\"An entity must be set without '&' and ';'. Eg. use '#xD' for '&#xD;'\")\n        }else if(value === \"&\"){\n            throw new Error(\"An entity with value '&' is not permitted\");\n        }else{\n            this.externalEntities[key] = value;\n        }\n    }\n}\n\nmodule.exports = XMLParser;","const EOL = \"\\n\";\n\n/**\n * \n * @param {array} jArray \n * @param {any} options \n * @returns \n */\nfunction toXml(jArray, options) {\n    let indentation = \"\";\n    if (options.format && options.indentBy.length > 0) {\n        indentation = EOL;\n    }\n    return arrToStr(jArray, options, \"\", indentation);\n}\n\nfunction arrToStr(arr, options, jPath, indentation) {\n    let xmlStr = \"\";\n    let isPreviousElementTag = false;\n\n    for (let i = 0; i < arr.length; i++) {\n        const tagObj = arr[i];\n        const tagName = propName(tagObj);\n        if(tagName === undefined) continue;\n\n        let newJPath = \"\";\n        if (jPath.length === 0) newJPath = tagName\n        else newJPath = `${jPath}.${tagName}`;\n\n        if (tagName === options.textNodeName) {\n            let tagText = tagObj[tagName];\n            if (!isStopNode(newJPath, options)) {\n                tagText = options.tagValueProcessor(tagName, tagText);\n                tagText = replaceEntitiesValue(tagText, options);\n            }\n            if (isPreviousElementTag) {\n                xmlStr += indentation;\n            }\n            xmlStr += tagText;\n            isPreviousElementTag = false;\n            continue;\n        } else if (tagName === options.cdataPropName) {\n            if (isPreviousElementTag) {\n                xmlStr += indentation;\n            }\n            xmlStr += `<![CDATA[${tagObj[tagName][0][options.textNodeName]}]]>`;\n            isPreviousElementTag = false;\n            continue;\n        } else if (tagName === options.commentPropName) {\n            xmlStr += indentation + `<!--${tagObj[tagName][0][options.textNodeName]}-->`;\n            isPreviousElementTag = true;\n            continue;\n        } else if (tagName[0] === \"?\") {\n            const attStr = attr_to_str(tagObj[\":@\"], options);\n            const tempInd = tagName === \"?xml\" ? \"\" : indentation;\n            let piTextNodeName = tagObj[tagName][0][options.textNodeName];\n            piTextNodeName = piTextNodeName.length !== 0 ? \" \" + piTextNodeName : \"\"; //remove extra spacing\n            xmlStr += tempInd + `<${tagName}${piTextNodeName}${attStr}?>`;\n            isPreviousElementTag = true;\n            continue;\n        }\n        let newIdentation = indentation;\n        if (newIdentation !== \"\") {\n            newIdentation += options.indentBy;\n        }\n        const attStr = attr_to_str(tagObj[\":@\"], options);\n        const tagStart = indentation + `<${tagName}${attStr}`;\n        const tagValue = arrToStr(tagObj[tagName], options, newJPath, newIdentation);\n        if (options.unpairedTags.indexOf(tagName) !== -1) {\n            if (options.suppressUnpairedNode) xmlStr += tagStart + \">\";\n            else xmlStr += tagStart + \"/>\";\n        } else if ((!tagValue || tagValue.length === 0) && options.suppressEmptyNode) {\n            xmlStr += tagStart + \"/>\";\n        } else if (tagValue && tagValue.endsWith(\">\")) {\n            xmlStr += tagStart + `>${tagValue}${indentation}</${tagName}>`;\n        } else {\n            xmlStr += tagStart + \">\";\n            if (tagValue && indentation !== \"\" && (tagValue.includes(\"/>\") || tagValue.includes(\"</\"))) {\n                xmlStr += indentation + options.indentBy + tagValue + indentation;\n            } else {\n                xmlStr += tagValue;\n            }\n            xmlStr += `</${tagName}>`;\n        }\n        isPreviousElementTag = true;\n    }\n\n    return xmlStr;\n}\n\nfunction propName(obj) {\n    const keys = Object.keys(obj);\n    for (let i = 0; i < keys.length; i++) {\n        const key = keys[i];\n        if(!obj.hasOwnProperty(key)) continue;\n        if (key !== \":@\") return key;\n    }\n}\n\nfunction attr_to_str(attrMap, options) {\n    let attrStr = \"\";\n    if (attrMap && !options.ignoreAttributes) {\n        for (let attr in attrMap) {\n            if(!attrMap.hasOwnProperty(attr)) continue;\n            let attrVal = options.attributeValueProcessor(attr, attrMap[attr]);\n            attrVal = replaceEntitiesValue(attrVal, options);\n            if (attrVal === true && options.suppressBooleanAttributes) {\n                attrStr += ` ${attr.substr(options.attributeNamePrefix.length)}`;\n            } else {\n                attrStr += ` ${attr.substr(options.attributeNamePrefix.length)}=\"${attrVal}\"`;\n            }\n        }\n    }\n    return attrStr;\n}\n\nfunction isStopNode(jPath, options) {\n    jPath = jPath.substr(0, jPath.length - options.textNodeName.length - 1);\n    let tagName = jPath.substr(jPath.lastIndexOf(\".\") + 1);\n    for (let index in options.stopNodes) {\n        if (options.stopNodes[index] === jPath || options.stopNodes[index] === \"*.\" + tagName) return true;\n    }\n    return false;\n}\n\nfunction replaceEntitiesValue(textValue, options) {\n    if (textValue && textValue.length > 0 && options.processEntities) {\n        for (let i = 0; i < options.entities.length; i++) {\n            const entity = options.entities[i];\n            textValue = textValue.replace(entity.regex, entity.val);\n        }\n    }\n    return textValue;\n}\nmodule.exports = toXml;\n","'use strict';\n//parse Empty Node as self closing node\nconst buildFromOrderedJs = require('./orderedJs2Xml');\n\nconst defaultOptions = {\n  attributeNamePrefix: '@_',\n  attributesGroupName: false,\n  textNodeName: '#text',\n  ignoreAttributes: true,\n  cdataPropName: false,\n  format: false,\n  indentBy: '  ',\n  suppressEmptyNode: false,\n  suppressUnpairedNode: true,\n  suppressBooleanAttributes: true,\n  tagValueProcessor: function(key, a) {\n    return a;\n  },\n  attributeValueProcessor: function(attrName, a) {\n    return a;\n  },\n  preserveOrder: false,\n  commentPropName: false,\n  unpairedTags: [],\n  entities: [\n    { regex: new RegExp(\"&\", \"g\"), val: \"&amp;\" },//it must be on top\n    { regex: new RegExp(\">\", \"g\"), val: \"&gt;\" },\n    { regex: new RegExp(\"<\", \"g\"), val: \"&lt;\" },\n    { regex: new RegExp(\"\\'\", \"g\"), val: \"&apos;\" },\n    { regex: new RegExp(\"\\\"\", \"g\"), val: \"&quot;\" }\n  ],\n  processEntities: true,\n  stopNodes: [],\n  // transformTagName: false,\n  // transformAttributeName: false,\n  oneListGroup: false\n};\n\nfunction Builder(options) {\n  this.options = Object.assign({}, defaultOptions, options);\n  if (this.options.ignoreAttributes || this.options.attributesGroupName) {\n    this.isAttribute = function(/*a*/) {\n      return false;\n    };\n  } else {\n    this.attrPrefixLen = this.options.attributeNamePrefix.length;\n    this.isAttribute = isAttribute;\n  }\n\n  this.processTextOrObjNode = processTextOrObjNode\n\n  if (this.options.format) {\n    this.indentate = indentate;\n    this.tagEndChar = '>\\n';\n    this.newLine = '\\n';\n  } else {\n    this.indentate = function() {\n      return '';\n    };\n    this.tagEndChar = '>';\n    this.newLine = '';\n  }\n}\n\nBuilder.prototype.build = function(jObj) {\n  if(this.options.preserveOrder){\n    return buildFromOrderedJs(jObj, this.options);\n  }else {\n    if(Array.isArray(jObj) && this.options.arrayNodeName && this.options.arrayNodeName.length > 1){\n      jObj = {\n        [this.options.arrayNodeName] : jObj\n      }\n    }\n    return this.j2x(jObj, 0).val;\n  }\n};\n\nBuilder.prototype.j2x = function(jObj, level) {\n  let attrStr = '';\n  let val = '';\n  for (let key in jObj) {\n    if(!Object.prototype.hasOwnProperty.call(jObj, key)) continue;\n    if (typeof jObj[key] === 'undefined') {\n      // supress undefined node only if it is not an attribute\n      if (this.isAttribute(key)) {\n        val += '';\n      }\n    } else if (jObj[key] === null) {\n      // null attribute should be ignored by the attribute list, but should not cause the tag closing\n      if (this.isAttribute(key)) {\n        val += '';\n      } else if (key[0] === '?') {\n        val += this.indentate(level) + '<' + key + '?' + this.tagEndChar;\n      } else {\n        val += this.indentate(level) + '<' + key + '/' + this.tagEndChar;\n      }\n      // val += this.indentate(level) + '<' + key + '/' + this.tagEndChar;\n    } else if (jObj[key] instanceof Date) {\n      val += this.buildTextValNode(jObj[key], key, '', level);\n    } else if (typeof jObj[key] !== 'object') {\n      //premitive type\n      const attr = this.isAttribute(key);\n      if (attr) {\n        attrStr += this.buildAttrPairStr(attr, '' + jObj[key]);\n      }else {\n        //tag value\n        if (key === this.options.textNodeName) {\n          let newval = this.options.tagValueProcessor(key, '' + jObj[key]);\n          val += this.replaceEntitiesValue(newval);\n        } else {\n          val += this.buildTextValNode(jObj[key], key, '', level);\n        }\n      }\n    } else if (Array.isArray(jObj[key])) {\n      //repeated nodes\n      const arrLen = jObj[key].length;\n      let listTagVal = \"\";\n      for (let j = 0; j < arrLen; j++) {\n        const item = jObj[key][j];\n        if (typeof item === 'undefined') {\n          // supress undefined node\n        } else if (item === null) {\n          if(key[0] === \"?\") val += this.indentate(level) + '<' + key + '?' + this.tagEndChar;\n          else val += this.indentate(level) + '<' + key + '/' + this.tagEndChar;\n          // val += this.indentate(level) + '<' + key + '/' + this.tagEndChar;\n        } else if (typeof item === 'object') {\n          if(this.options.oneListGroup ){\n            listTagVal += this.j2x(item, level + 1).val;\n          }else{\n            listTagVal += this.processTextOrObjNode(item, key, level)\n          }\n        } else {\n          listTagVal += this.buildTextValNode(item, key, '', level);\n        }\n      }\n      if(this.options.oneListGroup){\n        listTagVal = this.buildObjectNode(listTagVal, key, '', level);\n      }\n      val += listTagVal;\n    } else {\n      //nested node\n      if (this.options.attributesGroupName && key === this.options.attributesGroupName) {\n        const Ks = Object.keys(jObj[key]);\n        const L = Ks.length;\n        for (let j = 0; j < L; j++) {\n          attrStr += this.buildAttrPairStr(Ks[j], '' + jObj[key][Ks[j]]);\n        }\n      } else {\n        val += this.processTextOrObjNode(jObj[key], key, level)\n      }\n    }\n  }\n  return {attrStr: attrStr, val: val};\n};\n\nBuilder.prototype.buildAttrPairStr = function(attrName, val){\n  val = this.options.attributeValueProcessor(attrName, '' + val);\n  val = this.replaceEntitiesValue(val);\n  if (this.options.suppressBooleanAttributes && val === \"true\") {\n    return ' ' + attrName;\n  } else return ' ' + attrName + '=\"' + val + '\"';\n}\n\nfunction processTextOrObjNode (object, key, level) {\n  const result = this.j2x(object, level + 1);\n  if (object[this.options.textNodeName] !== undefined && Object.keys(object).length === 1) {\n    return this.buildTextValNode(object[this.options.textNodeName], key, result.attrStr, level);\n  } else {\n    return this.buildObjectNode(result.val, key, result.attrStr, level);\n  }\n}\n\nBuilder.prototype.buildObjectNode = function(val, key, attrStr, level) {\n  if(val === \"\"){\n    if(key[0] === \"?\") return  this.indentate(level) + '<' + key + attrStr+ '?' + this.tagEndChar;\n    else {\n      return this.indentate(level) + '<' + key + attrStr + this.closeTag(key) + this.tagEndChar;\n    }\n  }else{\n\n    let tagEndExp = '</' + key + this.tagEndChar;\n    let piClosingChar = \"\";\n    \n    if(key[0] === \"?\") {\n      piClosingChar = \"?\";\n      tagEndExp = \"\";\n    }\n  \n    // attrStr is an empty string in case the attribute came as undefined or null\n    if ((attrStr || attrStr === '') && val.indexOf('<') === -1) {\n      return ( this.indentate(level) + '<' +  key + attrStr + piClosingChar + '>' + val + tagEndExp );\n    } else if (this.options.commentPropName !== false && key === this.options.commentPropName && piClosingChar.length === 0) {\n      return this.indentate(level) + `<!--${val}-->` + this.newLine;\n    }else {\n      return (\n        this.indentate(level) + '<' + key + attrStr + piClosingChar + this.tagEndChar +\n        val +\n        this.indentate(level) + tagEndExp    );\n    }\n  }\n}\n\nBuilder.prototype.closeTag = function(key){\n  let closeTag = \"\";\n  if(this.options.unpairedTags.indexOf(key) !== -1){ //unpaired\n    if(!this.options.suppressUnpairedNode) closeTag = \"/\"\n  }else if(this.options.suppressEmptyNode){ //empty\n    closeTag = \"/\";\n  }else{\n    closeTag = `></${key}`\n  }\n  return closeTag;\n}\n\nfunction buildEmptyObjNode(val, key, attrStr, level) {\n  if (val !== '') {\n    return this.buildObjectNode(val, key, attrStr, level);\n  } else {\n    if(key[0] === \"?\") return  this.indentate(level) + '<' + key + attrStr+ '?' + this.tagEndChar;\n    else {\n      return  this.indentate(level) + '<' + key + attrStr + '/' + this.tagEndChar;\n      // return this.buildTagStr(level,key, attrStr);\n    }\n  }\n}\n\nBuilder.prototype.buildTextValNode = function(val, key, attrStr, level) {\n  if (this.options.cdataPropName !== false && key === this.options.cdataPropName) {\n    return this.indentate(level) + `<![CDATA[${val}]]>` +  this.newLine;\n  }else if (this.options.commentPropName !== false && key === this.options.commentPropName) {\n    return this.indentate(level) + `<!--${val}-->` +  this.newLine;\n  }else if(key[0] === \"?\") {//PI tag\n    return  this.indentate(level) + '<' + key + attrStr+ '?' + this.tagEndChar; \n  }else{\n    let textValue = this.options.tagValueProcessor(key, val);\n    textValue = this.replaceEntitiesValue(textValue);\n  \n    if( textValue === ''){\n      return this.indentate(level) + '<' + key + attrStr + this.closeTag(key) + this.tagEndChar;\n    }else{\n      return this.indentate(level) + '<' + key + attrStr + '>' +\n         textValue +\n        '</' + key + this.tagEndChar;\n    }\n  }\n}\n\nBuilder.prototype.replaceEntitiesValue = function(textValue){\n  if(textValue && textValue.length > 0 && this.options.processEntities){\n    for (let i=0; i<this.options.entities.length; i++) {\n      const entity = this.options.entities[i];\n      textValue = textValue.replace(entity.regex, entity.val);\n    }\n  }\n  return textValue;\n}\n\nfunction indentate(level) {\n  return this.options.indentBy.repeat(level);\n}\n\nfunction isAttribute(name /*, options*/) {\n  if (name.startsWith(this.options.attributeNamePrefix) && name !== this.options.textNodeName) {\n    return name.substr(this.attrPrefixLen);\n  } else {\n    return false;\n  }\n}\n\nmodule.exports = Builder;\n","'use strict';\n\nconst validator = require('./validator');\nconst XMLParser = require('./xmlparser/XMLParser');\nconst XMLBuilder = require('./xmlbuilder/json2xml');\n\nmodule.exports = {\n  XMLParser: XMLParser,\n  XMLValidator: validator,\n  XMLBuilder: XMLBuilder\n}","import type { ArgTypesEnhancer, DecoratorFunction } from '@storybook/types';\nimport { SourceType, enhanceArgTypes } from '@storybook/docs-tools';\n\nimport { sourceDecorator } from './client/addons/docs/sourceDecorator';\nimport { SymfonyRenderer } from './client';\n\nexport const decorators: DecoratorFunction<SymfonyRenderer>[] = [sourceDecorator];\n\nexport const parameters = {\n    docs: {\n        story: { inline: true },\n        source: {\n            type: SourceType.DYNAMIC,\n            language: 'html',\n            code: undefined,\n            excludeDecorators: undefined,\n        },\n    },\n};\n\nexport const argTypesEnhancers: ArgTypesEnhancer[] = [enhanceArgTypes];\n","/* eslint-disable no-underscore-dangle */\n\nimport { SNIPPET_RENDERED, SourceType } from '@storybook/docs-tools';\nimport { addons, useEffect } from '@storybook/preview-api';\nimport type { DecoratorFunction } from '@storybook/types';\n\nimport { buildVariableDeclarations } from './buildVariableDeclarations';\nimport { sanitize } from './sourceSanitizer';\nimport { SymfonyRenderer } from '../../types';\n\nfunction skipSourceRender(context: Parameters<DecoratorFunction<SymfonyRenderer>>[1]) {\n    const sourceParams = context?.parameters.docs?.source;\n    const isArgsStory = context?.parameters.__isArgsStory;\n\n    // always render if the user forces it\n    if (sourceParams?.type === SourceType.DYNAMIC) {\n        return false;\n    }\n\n    // never render if the user is forcing the block to render code, or\n    // if the user provides code, or if it's not an args story.\n    return !isArgsStory || sourceParams?.code || sourceParams?.type === SourceType.CODE;\n}\n\nexport const sourceDecorator: DecoratorFunction<SymfonyRenderer> = (storyFn, context) => {\n    const story = storyFn();\n    const setup = story.setup;\n\n    let source: string;\n    if (!skipSourceRender(context)) {\n        source = story.template.getSource();\n    }\n\n    useEffect(() => {\n        const { id, unmappedArgs } = context;\n        if (source) {\n            source = sanitize(source);\n\n            // If there is a setup function we should call it to resolve real args\n            const args = setup ? setup() : unmappedArgs;\n\n            const preamble = buildVariableDeclarations(args);\n\n            source = `${preamble}\\n\\n${source}`;\n            addons.getChannel().emit(SNIPPET_RENDERED, { id, args: unmappedArgs, source: source });\n        }\n    });\n\n    return story;\n};\n","const validArg = (value: any) => typeof value !== 'function';\n\nconst isObject = (value: any) => typeof value === 'object' && null !== value && !Array.isArray(value);\n\nconst indent = (level: number) => '    '.repeat(level);\n\nconst formatValue = (value: any, level: number = 0): string | false => {\n    if (null === value) {\n        return 'null';\n    } else if (typeof value === 'string') {\n        return `'${value}'`;\n    } else if (typeof value === 'number') {\n        return `${value}`;\n    } else if (typeof value === 'boolean') {\n        return value ? 'true' : 'false';\n    } else if (isObject(value)) {\n        if (Object.keys(value).length === 0) {\n            // Keep empty object\n            return '{}';\n        }\n        const objectDefinition = Object.entries(value)\n            .filter((v) => validArg(v[1]))\n            .map(([key, v]) => {\n                return `${indent(level + 1)}'${key}': ${formatValue(v, level + 1)}`;\n            });\n        if (objectDefinition.length === 0) {\n            // Object contained keys but were removed because not relevant, return false to skip\n            return false;\n        }\n\n        return ['{', objectDefinition.join(',\\n'), `${indent(level)}}`].join('\\n');\n    } else if (Array.isArray(value)) {\n        if (value.length === 0) {\n            // Keep empty arrays\n            return '[]';\n        }\n        const arrayDefinition = value\n            .filter((v) => validArg(v))\n            .map((v) => {\n                return `${indent(level + 1)}${formatValue(v, level + 1)}`;\n            });\n        if (arrayDefinition.length === 0) {\n            // Array contained keys but were removed because not relevant, return false to skip\n            return false;\n        }\n\n        return ['[', arrayDefinition.join(',\\n'), `${indent(level)}]`].join('\\n');\n    } else {\n        console.error('Unhandled value', value);\n        throw new Error(`Unhandled type: ${typeof value}`);\n    }\n};\n\nexport const buildVariableDeclarations = (args: any) => {\n    const varDeclarations = Object.entries(args)\n        .filter(([, value]) => validArg(value)) // Filter out irrelevant args\n        .map(([name, value]) => [name, formatValue(value)]) // Format name and value\n        .filter(([, value]) => false !== value) // Filter out irrelevant nested values\n        .map(([name, value]) => `{% set ${name} = ${value} %}`); // Print the set tag\n\n    return varDeclarations.join('\\n');\n};\n","import { XMLBuilder, XMLParser } from 'fast-xml-parser';\nimport { CALLBACK_ATTRIBUTE, ACTION_ATTRIBUTE } from '../../lib/eventCallbacks';\n\ntype TextNodeName = `#${string}`;\ntype LitAttributeNodeName = `@_${string}`;\ntype ExprAttributeNodeName = `@_:${string}`;\ntype AttributeNodeName = LitAttributeNodeName | ExprAttributeNodeName;\ntype ChildNodeName = string;\n\ntype XmlNode =\n    | string\n    | {\n          [key: TextNodeName]: string;\n          [key: AttributeNodeName]: string;\n          [key: ChildNodeName]: XmlNode;\n      };\n\nconst STRIPPED_ATTRIBUTES = [CALLBACK_ATTRIBUTE, ACTION_ATTRIBUTE];\n\nconst isAttributeName = (name: string): name is AttributeNodeName => {\n    return isLitAttributeName(name) || isExprAttributeName(name);\n};\n\nconst isLitAttributeName = (name: string): name is LitAttributeNodeName => {\n    return /^@_[^:]/.test(name);\n};\n\nconst isExprAttributeName = (name: string): name is ExprAttributeNodeName => {\n    return /^@_:/.test(name);\n};\n\nconst isTextName = (name: string): name is TextNodeName => {\n    return /^#/.test(name);\n};\n\nconst isNodeName = (name: string): name is ChildNodeName => {\n    return !isAttributeName(name) && !isTextName(name);\n};\n\nconst getAttributeName = (name: AttributeNodeName) => {\n    if (isExprAttributeName(name)) {\n        return name.replace(/^@_:/, '');\n    }\n    if (isLitAttributeName(name)) {\n        return name.replace(/^@_/, '');\n    }\n    throw new Error('Invalid argument');\n};\n\nconst traverseNode = (node: XmlNode) => {\n    if (typeof node !== 'string') {\n        for (const child in node) {\n            if (isAttributeName(child)) {\n                const attrName = getAttributeName(child);\n                if (STRIPPED_ATTRIBUTES.includes(attrName)) {\n                    delete node[child];\n                    continue;\n                }\n            }\n            if (isNodeName(child)) {\n                traverseNode(node[child]);\n            }\n        }\n    }\n};\n\nexport const sanitize = (source: string): string => {\n    const parser = new XMLParser({\n        ignoreAttributes: false,\n        stopNodes: ['*.pre', '*.script'],\n        unpairedTags: ['hr', 'br', 'link', 'meta'],\n        processEntities: true,\n        htmlEntities: true,\n        preserveOrder: true,\n        allowBooleanAttributes: true,\n    });\n\n    const xml = parser.parse(source);\n\n    traverseNode(xml);\n\n    const builder = new XMLBuilder({\n        ignoreAttributes: false,\n        processEntities: false,\n        format: true,\n        suppressEmptyNode: true,\n        preserveOrder: true,\n        suppressBooleanAttributes: true,\n    });\n\n    return builder.build(xml).trim();\n};\n","import { Args } from '@storybook/types';\nimport dedent from 'ts-dedent';\nimport { logger } from '@storybook/client-logger';\n\nexport const CALLBACK_ATTRIBUTE = 'data-storybook-callbacks';\n\n/**\n * @deprecated Use {@link CALLBACK_ATTRIBUTE} instead\n */\nexport const ACTION_ATTRIBUTE = 'data-storybook-action';\n\nconst proxifyEvent = <T extends Event>(e: T) => {\n    if (e.currentTarget !== null && Object.hasOwn(e.currentTarget, '__component')) {\n        // Special handling for Live Components:\n        // creates a proxy wrapper to omit the __component property that could\n        // make actions calls when its properties are listed\n        const elementProxy = new Proxy(e.currentTarget, {\n            ownKeys(target: Element): ArrayLike<string | symbol> {\n                return Object.keys(target).filter((key) => key !== '__component');\n            },\n        });\n\n        return new Proxy(e, {\n            get(obj, key) {\n                const value = Reflect.get(obj, key);\n\n                return value === e.currentTarget ? elementProxy : value;\n            },\n        });\n    }\n\n    return e;\n};\n\n/**\n * Configure callbacks binding by looking for the callback attributes.\n */\nexport const setupEventCallbacks = (args: Args, root: HTMLElement) => {\n    document.addEventListener(\n        'DOMContentLoaded',\n        () => {\n            Object.entries(args)\n                .filter(([, arg]) => typeof arg === 'function')\n                .forEach(([name, arg]) => {\n                    let el = root.querySelector(`[${CALLBACK_ATTRIBUTE}~='${name}']`);\n\n                    const isLegacyAttribute =\n                        el === null && null !== (el = root.querySelector(`[${ACTION_ATTRIBUTE}~='${name}']`));\n\n                    if (null !== el) {\n                        if (isLegacyAttribute) {\n                            logger.warn(dedent`\n                            Usage of attribute \"${ACTION_ATTRIBUTE}\" is deprecated. Use \"${CALLBACK_ATTRIBUTE}\" instead.\n                            `);\n                        }\n\n                        el.addEventListener(name, (event: Event) => arg(proxifyEvent(event)));\n                    } else {\n                        logger.warn(dedent`\n                        Callback arg \"${name}\" is not bound to any DOM element.\n                    `);\n                    }\n                });\n        },\n        { once: true }\n    );\n};\n"]}