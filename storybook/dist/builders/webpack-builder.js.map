{"version":3,"sources":["../../src/builders/webpack-builder.ts","../../node_modules/ts-dedent/src/index.ts"],"names":["createProxyMiddleware","baseBuilder","dedent","templ","values","_i","strings","indentLengths","arr","str","matches","match","_a","_b","pattern_1","string","value","i","endentations","endentation","indentedValue","esm_default","getConfig","bail","start","options","isProd","symfony","proxyPaths","paths","path","build","corePresets","overridePresets"],"mappings":"AAAA,OAAS,yBAAAA,MAA6B,wBAEtC,UAAYC,MAAiB,8BCFvB,SAAUC,EACdC,EAAoC,SACpCC,EAAA,CAAA,EAAAC,EAAA,EAAAA,EAAA,UAAA,OAAAA,IAAAD,EAAAC,EAAA,CAAA,EAAA,UAAAA,CAAA,EAEA,IAAIC,EAAU,MAAM,KAAK,OAAOH,GAAU,SAAW,CAACA,CAAK,EAAIA,CAAK,EAGpEG,EAAQA,EAAQ,OAAS,CAAC,EAAIA,EAAQA,EAAQ,OAAS,CAAC,EAAE,QACxD,iBACA,EAAE,EAIJ,IAAMC,EAAgBD,EAAQ,OAAO,SAACE,EAAKC,EAAG,CAC5C,IAAMC,EAAUD,EAAI,MAAM,qBAAqB,EAC/C,OAAIC,EACKF,EAAI,OACTE,EAAQ,IAAI,SAACC,EAAK,CAAA,IAAAC,EAAAC,EAAK,OAAAA,GAAAD,EAAAD,EAAM,MAAM,QAAQ,KAAC,MAAAC,IAAA,OAAA,OAAAA,EAAE,UAAM,MAAAC,IAAA,OAAAA,EAAI,CAAC,CAAA,CAAC,EAGvDL,CACT,EAAa,CAAA,CAAE,EAGf,GAAID,EAAc,OAAQ,CACxB,IAAMO,EAAU,IAAI,OAAO;OAAW,KAAK,IAAG,MAAR,KAAYP,CAAa,EAAA,IAAM,GAAG,EAExED,EAAUA,EAAQ,IAAI,SAACG,EAAG,CAAK,OAAAA,EAAI,QAAQK,EAAS;CAAI,CAAzB,CAA0B,EAI3DR,EAAQ,CAAC,EAAIA,EAAQ,CAAC,EAAE,QAAQ,SAAU,EAAE,EAG5C,IAAIS,EAAST,EAAQ,CAAC,EAEtB,OAAAF,EAAO,QAAQ,SAACY,EAAOC,EAAC,CAEtB,IAAMC,EAAeH,EAAO,MAAM,eAAe,EAC3CI,EAAcD,EAAeA,EAAa,CAAC,EAAI,GACjDE,EAAgBJ,EAEhB,OAAOA,GAAU,UAAYA,EAAM,SAAS;CAAI,IAClDI,EAAgB,OAAOJ,CAAK,EACzB,MAAM;CAAI,EACV,IAAI,SAACP,EAAKQ,EAAC,CACV,OAAOA,IAAM,EAAIR,EAAM,GAAGU,EAAcV,CAC1C,CAAC,EACA,KAAK;CAAI,GAGdM,GAAUK,EAAgBd,EAAQW,EAAI,CAAC,CACzC,CAAC,EAEMF,CACT,CAEA,IAAAM,EAAenB,ED/CR,IAAMoB,EAAwB,YAExBC,EAAmB,OAEnBC,EAAkC,MAAOC,GAAY,CAC9D,IAAMC,EAASD,EAAQ,QAAQ,aAAe,aAExC,CAAE,QAAAE,CAAQ,EAAI,MAAMF,EAAQ,QAAQ,QAAQ,MAE/C,kBAAkB,EAErB,GAAI,CAACE,EAAQ,OACT,MAAM,IAAI,MAAMN;AAAA;AAAA;AAAA;AAAA;AAAA,SAKf,EAGL,IAAMO,EAAa,CAAC,oBAAoB,EAExC,GAAID,EAAQ,WAAY,CACpB,IAAME,EAAS,MAAM,QAAQF,EAAQ,UAAU,EAA2BA,EAAQ,WAA/B,CAACA,EAAQ,UAAU,EACtEC,EAAW,KAAK,GAAGC,CAAK,CAC5B,CAEA,QAAWC,KAAQF,EACfH,EAAQ,OAAO,IACXK,EACA9B,EAAsB,CAClB,OAAQ2B,EAAQ,OAChB,aAAc,GACd,OAAQD,EACR,QAAS,CACL,oBAAqB,MACzB,CACJ,CAAC,CACL,EAGJ,OAAmB,QAAMD,CAAO,CACpC,EAEaM,EAAoB,QAEpBC,EAA0B,cAC1BC,EAA8B","sourcesContent":["import { createProxyMiddleware } from 'http-proxy-middleware';\n\nimport * as baseBuilder from '@storybook/builder-webpack5';\nimport dedent from 'ts-dedent';\n\nexport type BuilderOptions = {\n    server?: string;\n    proxyPaths?: string | string[];\n};\n\nexport const getConfig = baseBuilder.getConfig;\n\nexport const bail = baseBuilder.bail;\n\nexport const start: typeof baseBuilder.start = async (options) => {\n    const isProd = options.options.configType === 'PRODUCTION';\n\n    const { symfony } = await options.options.presets.apply<{\n        symfony: BuilderOptions;\n    }>('frameworkOptions');\n\n    if (!symfony.server) {\n        throw new Error(dedent`\n        Cannot configure dev server.\n        \n        \"server\" option in \"framework.options.symfony\" is required for Storybook dev server to run.\n        Update your main.ts|js file accordingly.\n        `);\n    }\n\n    const proxyPaths = ['/_storybook/render'];\n\n    if (symfony.proxyPaths) {\n        const paths = !Array.isArray(symfony.proxyPaths) ? [symfony.proxyPaths] : symfony.proxyPaths;\n        proxyPaths.push(...paths);\n    }\n\n    for (const path of proxyPaths) {\n        options.router.use(\n            path,\n            createProxyMiddleware({\n                target: symfony.server,\n                changeOrigin: true,\n                secure: isProd,\n                headers: {\n                    'X-Storybook-Proxy': 'true',\n                },\n            })\n        );\n    }\n\n    return baseBuilder.start(options);\n};\n\nexport const build = baseBuilder.build;\n\nexport const corePresets = baseBuilder.corePresets;\nexport const overridePresets = baseBuilder.overridePresets;\n","export function dedent(\n  templ: TemplateStringsArray | string,\n  ...values: unknown[]\n): string {\n  let strings = Array.from(typeof templ === 'string' ? [templ] : templ);\n\n  // 1. Remove trailing whitespace.\n  strings[strings.length - 1] = strings[strings.length - 1].replace(\n    /\\r?\\n([\\t ]*)$/,\n    '',\n  );\n\n  // 2. Find all line breaks to determine the highest common indentation level.\n  const indentLengths = strings.reduce((arr, str) => {\n    const matches = str.match(/\\n([\\t ]+|(?!\\s).)/g);\n    if (matches) {\n      return arr.concat(\n        matches.map((match) => match.match(/[\\t ]/g)?.length ?? 0),\n      );\n    }\n    return arr;\n  }, <number[]>[]);\n\n  // 3. Remove the common indentation from all strings.\n  if (indentLengths.length) {\n    const pattern = new RegExp(`\\n[\\t ]{${Math.min(...indentLengths)}}`, 'g');\n\n    strings = strings.map((str) => str.replace(pattern, '\\n'));\n  }\n\n  // 4. Remove leading whitespace.\n  strings[0] = strings[0].replace(/^\\r?\\n/, '');\n\n  // 5. Perform interpolation.\n  let string = strings[0];\n\n  values.forEach((value, i) => {\n    // 5.1 Read current indentation level\n    const endentations = string.match(/(?:^|\\n)( *)$/)\n    const endentation = endentations ? endentations[1] : ''\n    let indentedValue = value\n    // 5.2 Add indentation to values with multiline strings\n    if (typeof value === 'string' && value.includes('\\n')) {\n      indentedValue = String(value)\n        .split('\\n')\n        .map((str, i) => {\n          return i === 0 ? str : `${endentation}${str}`\n        })\n        .join('\\n');\n    }\n\n    string += indentedValue + strings[i + 1];\n  });\n\n  return string;\n}\n\nexport default dedent;\n"]}